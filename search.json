[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 InsightRX Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/busulfan_mipd.html","id":"define-trial-design","dir":"Articles","previous_headings":"","what":"1. Define trial design","title":"Model misspecification, a busulfan case study","text":"simple trial, patients dosed per day four days, 4 levels collected per day, 3.5, 4, 6 8 hours post-dose. adjust doses 2, 3, 4 achieve target cumulative AUC 90 t = 192 hours.","code":"tdm_design <- create_sampling_design(   offset = rep(c(3.5, 4, 6, 8), 4),   at = rep(1:4, each = 4),   anchor = \"dose\" ) target_design <- create_target_design(   targettype = \"cum_auc\",    targetvalue = 90 * 1000,       # unit conversion   time = 192 ) update_design <- create_regimen_update_design(   at = c(2, 3, 4),   anchor = \"dose\",   dose_optimization_method = map_adjust_dose ) initial_method <- create_initial_regimen_design(   method = weight_based_starting_dose,   mgkg = 3.2,   dosing_weight = \"Weight\", # matches column in data set   regimen = list(     interval = 24,     n = 4,     t_inf = 3,     type = \"infusion\"   ) ) sim_mod_design <- create_model_design(lib = \"pkbusulfanmccune\") est_mod_design <- create_model_design(lib = \"pkbusulfanshukla\")  design <- create_trial_design(   sampling_design = tdm_design,   target_design = target_design,   regimen_update_design = update_design,   initial_regimen_design = initial_method,   sim_design = sim_mod_design,    est_design = est_mod_design )"},{"path":"/articles/busulfan_mipd.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Model misspecification, a busulfan case study","text":"create example data set 10 individuals originally drawn NHANES data set. data set created survey data collected US National Center Health Statistics general sampling US population, available NHANES R package. next step make sure covariates need. Busulfan known time-dependent relationship clearance, McCune model takes covariate indicates time relationship start (T_CL_EFF; useful test doses impact busulfan clearance). set zero patients. Shukla model also takes conditioning regimen covariate, since co-medication Clofarabine Fludarabine associated change clearance (REGI). also set zero patients. models might require fat-free mass calculated covariates. good time sort processing data set! may also need convert units (height m cm, example.) first rows data set: also need link covariates data set covariates expected model: check covariates required models use PKPDsim::get_model_covariates(): check covariates data set use colnames():","code":"dat <- data.frame(   ID = 1:10,   Gender = c(1, 1, 0, 1, 1, 0, 1, 1, 1, 0),   Age = c(34L, 4L, 49L, 9L, 8L, 45L, 66L, 58L, 54L, 10L),   Weight = c(87.4, 17, 86.7, 29.8, 35.2, 75.7, 68, 78.4, 74.7, 38.6),   Height = c(164.7, 105.4, 168.4, 133, 130.6, 166.7, 169.5, 182, 169.4, 141.8) ) dat$T_CL_EFF <- 0 dat$REGI <- 0 head(dat) #>   ID Gender Age Weight Height T_CL_EFF REGI #> 1  1      1  34   87.4  164.7        0    0 #> 2  2      1   4   17.0  105.4        0    0 #> 3  3      0  49   86.7  168.4        0    0 #> 4  4      1   9   29.8  133.0        0    0 #> 5  5      1   8   35.2  130.6        0    0 #> 6  6      0  45   75.7  166.7        0    0 unique(   c(     PKPDsim::get_model_covariates(sim_mod_design$model),     PKPDsim::get_model_covariates(est_mod_design$model)   ) ) #> [1] \"AGE\"      \"WT\"       \"HT\"       \"SEX\"      \"T_CL_EFF\" \"REGI\" colnames(dat) #> [1] \"ID\"       \"Gender\"   \"Age\"      \"Weight\"   \"Height\"   \"T_CL_EFF\" \"REGI\" cov_map <- c(   AGE = \"Age\",    WT = \"Weight\",    HT = \"Height\",    SEX = \"Gender\",   T_CL_EFF = \"T_CL_EFF\",   REGI = \"REGI\" )"},{"path":"/articles/busulfan_mipd.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"3. Simulate a trial!","title":"Model misspecification, a busulfan case study","text":"patient start dose 3.2 mg/kg body weight. use mipdtrial::dose_grid_search optimize doses attain target 90 mg*h/L. inter-individual variability terms, use inter-individual variability described “true” model, since reflect “true” distribution patient pharmacokinetics. Later, estimate individual PK parameters using estimation model measured TDMs “collect”. residual error terms, use residual error “true” model, since supposed reflect “true” unexplained error (assay error, etc.). function creates data frame error add “true” simulated concentration produced measured therapeutic drug monitoring sample. first rows simulation results:","code":"head(res$final_exposure) #>   id  auc_true auc_est tta target_index #> 1  1  93148.57   90000  NA            1 #> 2  2 110043.02   90000  NA            1 #> 3  3  92196.50   90000  NA            1 #> 4  4 100731.06   90000  NA            1 #> 5  5  92462.25   90000  NA            1 #> 6  6  95373.36   90000  NA            1"},{"path":"/articles/busulfan_mipd.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"6. Analyze results","title":"Model misspecification, a busulfan case study","text":"well patients get target? looks like estimated target attainment high (patients AUC close 90 mg*h/L), “true” AUC higher due model misspecification!  Even model misspecification, target attainment (within 20% target AUC) still high: Overall, 90% patients “true” AUC 90 mg*h/L. -depth analysis differences two models impact target attainment, see Hughes et al., J PKPD (2024)","code":"res$final_exposure %>%   pivot_longer(     c(auc_true, auc_est),     names_to = \"auc_type\",     values_to = \"auc\"   ) %>%   ggplot() +     aes(x = auc_type, y = auc/1000) +     geom_boxplot() +     geom_hline(yintercept = 90, color = \"navyblue\", linetype = \"dashed\") +     scale_y_continuous(limit = c(0, NA)) +     theme_minimal() +     labs(       y = \"Cumulative AUC (mg\\u00B7h/L)\",       x = \"AUC type\"     ) target_attainment <- res$final_exposure %>%   mutate(     ontarget = is_on_target(auc_true, target_design)) %>%   summarize(proportion_ontarget = mean(ontarget)) %>%   pull(proportion_ontarget) target_attainment <- paste0(round(100 * target_attainment), \"%\")"},{"path":"/articles/pegasp_mipd.html","id":"define-simulation-parameters","dir":"Articles","previous_headings":"","what":"1. Define simulation parameters","title":"Custom initial dose nomogram, a PEG Asparaginase case study","text":"Initial dosing algorithms must return PKPDsim-style regimen object, access three objects: covariates: patient-level covariates design: named list PKPDsim-style covariates (created create_trial_design) cov_mapping: described later vignette Initial PEG-asparaginase dosing 2500 IU/m2 patients older 22 years (inclusive) 2000 IU/m2 patients younger 22 years (exclusive), doses capped maximum total dose 3750 IU. nomogram, need information stored covariates. Let’s define function: PEG-asparaginase long half-life. simulated trial, patients receive 4 doses separated 14 days levels collected every 14 days just prior next dose. adjust doses 2 3 achieve steady state asparaginase activity level 300 IU/L (0.3 IU/mL) (goal: 0.1 - 0.5 IU/mL)","code":"asp_nomogram <- function(covariates, ...) {   if (covariates$AGE$value >= 22) {     dose <- 2500 * covariates$BSA$value   } else {     dose <- 2000 * covariates$BSA$value   }    # cap dose to a maximum of 3750   dose <- pmin(dose, 3750)      # create initial dosing regimen (see PKPDsim::new_regimen for more info)   PKPDsim::new_regimen(     amt = dose,      interval = 14 * 24, # 14 days, converted to hours     n = 5,     t_inf = 1,     type = \"infusion\"   ) }  initial_method <- create_initial_regimen_design(method = asp_nomogram) tdm_design <- create_sampling_design(   time = c(13.9*24,  27.9*24,  41.9*24) )  update_design <- create_regimen_update_design(   at = c(2, 3),   anchor = \"dose\",   dose_optimization_method = map_adjust_dose )  target_design <- create_target_design(   targettype = \"cmin\",    targetvalue = 300,   at = 4,   anchor = \"dose\" )  evaluation_design2 <- create_eval_design(   evaltype = c(\"conc\", \"auc24\"),   at = c(14, 28, 42),   anchor = \"day\" )  model_design <- create_model_design(lib = \"pkpegasparaginasemodifiedwurthwein\")  initial_method <- create_initial_regimen_design(method = asp_nomogram)  design <- create_trial_design(   sampling_design = tdm_design,   target_design = target_design,   regimen_update_design = update_design,   initial_regimen_design = initial_method,   sim_design = model_design,    est_design = model_design,   eval_design = evaluation_design2 )"},{"path":"/articles/pegasp_mipd.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Custom initial dose nomogram, a PEG Asparaginase case study","text":"create example data set 20 individuals originally drawn NHANES data set. data set created survey data collected US National Center Health Statistics general sampling US population, available NHANES R package. also need link covariates data set covariates expected model: check covariates required model use PKPDsim::get_model_covariates(): check covariates data set use colnames(): checking covariates, can link named character vector, model covariates names data covariates values. initial dosing nomogram relies BSA, also need include BSA mapping object.","code":"dat <- data.frame(   ID = 1:20,   Sex = rep(c(0, 1), c(7L, 13L)),   Age = c(10, 9, 13, 11, 6, 16, 9, 4, 9, 8, 16, 8, 17, 12, 16, 8, 3, 17, 13, 7),   Weight = c(     38.6, 53.1, 45.1, 43.4, 20.7, 48.7, 59.7, 17, 29.8, 35.2, 73.2, 40.1, 72.3,     57.7, 88.9, 24.6, 11.6, 103.8, 74, 25.5   ),   Height = c(     141.8, 139.2, 157.6, 153.8, 112.9, 158.4, 146.7, 105.4, 133.1, 130.6, 172,     128.4, 176, 158.9, 183.3, 125.6, 89.9, 181.5, 173.7, 129.6   ),   BSA = c(     1.233, 1.433, 1.405, 1.362, 0.806, 1.464, 1.56, 0.705, 1.05, 1.13,      1.87, 1.196, 1.88, 1.596, 2.128, 0.926, 0.538, 2.288, 1.89, 0.958   ) ) get_model_covariates(model_design$model) #> [1] \"AGE\" \"SEX\" \"HT\"  \"WT\" colnames(dat) #> [1] \"ID\"     \"Sex\"    \"Age\"    \"Weight\" \"Height\" \"BSA\" cov_map <- c(   AGE = \"Age\",    WT = \"Weight\",    HT = \"Height\",    SEX = \"Sex\",   BSA = \"BSA\" )"},{"path":"/articles/pegasp_mipd.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"3. Simulate a trial!","title":"Custom initial dose nomogram, a PEG Asparaginase case study","text":"run trial, just call run_trial()! function lot --hood. inter-individual variability terms, use inter-individual variability described model, since reflect distribution patient pharmacokinetics. Later, estimate individual PK parameters using estimation model measured TDMs “collect”. residual error terms, use residual error model, since supposed reflect unexplained error (assay error, etc.). function creates data frame error add simulated concentration produced measured therapeutic drug monitoring sample. first rows simulation results:","code":"res <- run_trial(   data = dat,   design = design,   cov_mapping = cov_map,   progress = FALSE,   seed = 1 ) head(res$final_exposure) #>   id conc_true conc_est tta target_index #> 1  1  335.4693      300 673            1 #> 2  2  352.3897      300 673            1 #> 3  3  336.5061      300 673            1 #> 4  4  270.6816      300 337            1 #> 5  5  320.0965      300 337            1 #> 6  6  291.4013      300 337            1"},{"path":"/articles/pegasp_mipd.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"4. Analyze results","title":"Custom initial dose nomogram, a PEG Asparaginase case study","text":"well patients get target?  can also check well patients across days 14, 28, 42.  work needed establish realistic upper toxicity threshold inform therapeutic window PEG-asparaginase, MIPD approach informed AAL levels already germane therapeutic care PEG-asparaginase may translate better target attainment cost savings. details, see Brooks et al., PAGE Meeting; June 26-28, 2024, Rome, Italy..","code":"res$final_exposure |>    pivot_longer(-id, names_to = \"conc_type\", values_to = \"conc\") |>    ggplot(aes(x = conc_type, y = conc)) +     geom_rect(       aes(         xmin = -Inf, xmax = Inf,          ymin = target_design$min, ymax = target_design$max,       ),       fill = \"grey80\"     ) +     geom_boxplot() +     coord_cartesian(ylim = c(0, target_design$max * 1.3)) +     labs(       x = \"Concentration type\",       y = \"Final concentration after MIPD (IU/L)\"     ) res$eval_exposure |>    dplyr::filter(type == \"conc\") |>    dplyr::mutate(time = time/24) |>    ggplot(aes(x = time, y = value, group = time)) +   geom_boxplot() +   labs(     x = \"Day\",     y = \"Concentration(IU/L)\"   )"},{"path":"/articles/sample_timing.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Effect of sample timing (R example)","text":"hospital currently collects two samples adjusting vancomycin doses: one 1-hr post-dose another 9 hours post-dose. want compare impact target attainment (area curve (AUC) 400-600 mg*h/L) switch collecting single sample 5 hours post-dose. answer problem using simulation!","code":"library(mipdtrial) library(dplyr)   # for easier data manipulation  library(tidyr) library(ggplot2) # for plotting our results if(!requireNamespace(\"pkvancothomson\", quietly = TRUE)) {   PKPDsim::install_default_literature_model(\"pk_vanco_thomson\")   loadNamespace(\"pkvancothomson\") }"},{"path":"/articles/sample_timing.html","id":"define-trial-design","dir":"Articles","previous_headings":"","what":"1. Define trial design","title":"Effect of sample timing (R example)","text":"simulated trial two arms: Two samples, collected 1 9 hours dose One sample, collected 5 hours dose case, collect samples fourth dosing interval, simplicity, assume patients receiving vancomycin twice daily, infused 2 hours. adjust fifth dose based levels, aiming daily AUC 400-600 mg*h/L day 6. use Thomson (2009) model simulating patient pharmacokinetics. initial dosing strategy based population PK parameters, dose size calculated reach specified target dosing interval 12 hours. Now can combine design choices together:","code":"tdm_design1 <- create_sampling_design(   offset = c(1, 9),   at = c(4, 4),    anchor = \"dose\" ) tdm_design2 <- create_sampling_design(   offset = 5,   at = 4,   anchor = \"dose\" ) update_design <- create_regimen_update_design(   at = 5,   anchor = \"dose\",   dose_optimization_method = map_adjust_dose ) target_design <- create_target_design(   targettype = \"auc24\",    targetmin = 400,   targetmax = 600,   at = 6,   anchor = \"day\" ) model_design <- create_model_design(lib = \"pkvancothomson\") initial_method <- create_initial_regimen_design(   method = model_based_starting_dose,   regimen = list(     interval = 12,     type = \"infusion\",     t_inf = 1   ),   settings = list(     auc_comp = 3,     dose_resolution = 250,     dose_grid = c(250, 5000, 250)   ) ) design1 <- create_trial_design(   sampling_design = tdm_design1, # arm 1   target_design = target_design,   regimen_update_design = update_design,   initial_regimen_design = initial_method,   sim_design = model_design, est_design = model_design )  design2 <- create_trial_design(   sampling_design = tdm_design2, # arm 2   target_design = target_design,   regimen_update_design = update_design,   initial_regimen_design = initial_method,   sim_design = model_design, est_design = model_design )"},{"path":"/articles/sample_timing.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Effect of sample timing (R example)","text":"example, randomly generate set weights creatinine clearances (CRCLs) synthetic data set. use Thomson (2009) model, accepts additional clearance hemodialysis covariate. Let’s set zero data set. models might require fat-free mass calculated covariates. good time sort processing data set! first rows data set: also need link covariates data set covariates expected model: check covariates required model use PKPDsim::get_model_covariates(): check covariates data set use colnames():","code":"set.seed(15) dat <- data.frame(   ID = 1:30,   weight = rnorm(30, 90, 25),               # kg, normally distributed   crcl = exp(rnorm(30, log(6), log(1.6)))   # L/hr, log-normally distributed  ) dat$CL_HEMO <- 0 head(dat) #>   ID    weight      crcl CL_HEMO #> 1  1  96.47057  4.827349       0 #> 2  2 135.77802  6.013269       0 #> 3  3  81.50954 11.863322       0 #> 4  4 112.42995  8.546496       0 #> 5  5 102.20041  9.448520       0 #> 6  6  58.61535  7.477850       0 PKPDsim::get_model_covariates(model_design$model) #> [1] \"WT\"      \"CRCL\"    \"CL_HEMO\" colnames(dat) #> [1] \"ID\"      \"weight\"  \"crcl\"    \"CL_HEMO\" cov_map <- c(   WT = \"weight\",    CRCL = \"crcl\",   CL_HEMO = \"CL_HEMO\" )"},{"path":"/articles/sample_timing.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"3. Simulate a trial!","title":"Effect of sample timing (R example)","text":"Patients get model-based dose (using population PK parameters), dose adjusted based MAP Bayesian fit made using collected samples. Individual PK parameters randomly generated based interindividual variability described model, residual variability added sample collected using error model described model. can look final exposure estimates arm:","code":"res1 <- run_trial(   data = dat,   design = design1,   cov_mapping = cov_map,   progress = FALSE,   seed = 15 ) #> ℹ Starting simulations in 1 threads #> ℹ Post-processing results res2 <- run_trial(   data = dat,   design = design2,   cov_mapping = cov_map,   progress = FALSE,   seed = 15 ) #> ℹ Starting simulations in 1 threads #> ℹ Post-processing results final_exp1 <- res1$final_exposure %>%   mutate(arm = \"peak-trough\") final_exp2 <- res2$final_exposure %>%   mutate(arm = \"mid-interval\") results <- bind_rows(final_exp1, final_exp2) head(results) #>   id auc_true auc_est tta target_index         arm #> 1  1 552.5932     500  25            1 peak-trough #> 2  2 698.4312     500  25            1 peak-trough #> 3  3 445.3675     500 121            1 peak-trough #> 4  4 535.3908     500  13            1 peak-trough #> 5  5 584.2675     500   1            1 peak-trough #> 6  6 415.9173     500  13            1 peak-trough"},{"path":"/articles/sample_timing.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"4. Analyze results","title":"Effect of sample timing (R example)","text":"interested AUC target attainment. target attainment compare two arms trial?  Target attainment high varied little two arms, providing evidence support move collecting two samples collecting single sample per dosing interval. simulating sampling strategy patient, can also look patient responded sampling strategy.  strong correlation final AUC two sampling strategies. patients -exposed -exposed strategies, others -target one strategy .","code":"target_attainment <- results %>%   mutate(ontarget = ifelse(auc_true >= 400 & auc_true <= 600, 1, 0)) %>%   group_by(arm) %>%   summarize(prop_on_target = 100 * mean(ontarget)) target_attainment %>%   ggplot() +     aes(x = arm, y = prop_on_target) +     geom_bar(stat = \"identity\") +     theme_minimal() +     theme(       panel.grid.major.x = element_blank()     ) +     labs(       x = \"Sampling strategy\",       y = \"Percent on target (%)\"     ) results %>%   select(id, auc_true, arm) %>%   pivot_wider(names_from = arm, values_from = auc_true) %>%   ggplot() +     aes(x = `peak-trough`, y = `mid-interval`) +     geom_rect(       aes(xmin = 400, xmax = 600, ymin = -Inf, ymax = Inf),        fill = \"grey70\",       alpha = 0.05     ) +     geom_rect(       aes(ymin = 400, ymax = 600, xmin = -Inf, xmax = Inf),       fill = \"grey70\",       alpha = 0.05     ) +     geom_point() +     theme_minimal()"},{"path":"/articles/sample_timing_yaml.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Effect of sample timing (YAML example)","text":"hospital currently collects two samples adjusting vancomycin doses: one 1-hr post-dose another 9 hours post-dose. want compare impact target attainment (area curve (AUC) 400-600 mg*h/L) switch collecting single sample 5 hours post-dose. answer problem using simulation!","code":"library(mipdtrial) library(dplyr)   # for easier data manipulation  library(tidyr) library(ggplot2) # for plotting our results"},{"path":"/articles/sample_timing_yaml.html","id":"define-trial-design","dir":"Articles","previous_headings":"","what":"1. Define trial design","title":"Effect of sample timing (YAML example)","text":"simulated trial two arms: Two samples, collected 1 9 hours dose One sample, collected 5 hours dose case, collect samples fourth dosing interval, simplicity, assume patients receiving vancomycin twice daily, infused 2 hours. adjust fifth dose based levels, aiming daily AUC 400-600 mg*h/L day 6. designs implemented YAML files supplied package follows: can read spec R using create_trial_design():","code":"name: Test different sampling designs. description: Sampling design 1 - peak / trough designs:   initial_regimen:     method: model_based_starting_dose     regimen:       interval: 12       type: infusion       t_inf: 1     settings:       auc_comp: 3       dose_resolution: 250       dose_grid: [250, 5000, 250]   target:     targettype: auc24     targetmin: 400     targetmax: 600     at: 6     anchor: day   sampling:     offset: [1, 9]     at: [4, 4]     anchor: dose   regimen_update:     at: [5]     anchor: dose     update_type: dose     dose_optimization_method: map_adjust_dose   sim:     lib: pkvancothomson   est:     lib: pkvancothomson arm1 <- create_trial_design(   file = system.file(package = \"mipdtrial\", \"md/sample_timing1.yaml\") ) arm2 <- create_trial_design(   file = system.file(package = \"mipdtrial\", \"md/sample_timing2.yaml\") )"},{"path":"/articles/sample_timing_yaml.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Effect of sample timing (YAML example)","text":"example, randomly generate set weights creatinine clearances (CRCLs) synthetic data set. use Thomson (2009) model, accepts additional clearance hemodialysis covariate. Let’s set zero data set. models might require fat-free mass calculated covariates. good time sort processing data set! first rows data set: need link covariates data set covariates expected model.","code":"set.seed(15) dat <- data.frame(   ID = 1:30,   weight = rnorm(30, 90, 25),               # kg, normally distributed   crcl = exp(rnorm(30, log(6), log(1.6)))   # L/hr, log-normally distributed  ) dat$CL_HEMO <- 0 head(dat) #>   ID    weight      crcl CL_HEMO #> 1  1  96.47057  4.827349       0 #> 2  2 135.77802  6.013269       0 #> 3  3  81.50954 11.863322       0 #> 4  4 112.42995  8.546496       0 #> 5  5 102.20041  9.448520       0 #> 6  6  58.61535  7.477850       0 cov_mapping <- c(   WT = \"weight\",    CRCL = \"crcl\",   CL_HEMO = \"CL_HEMO\" )"},{"path":"/articles/sample_timing_yaml.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"3. Simulate a trial!","title":"Effect of sample timing (YAML example)","text":"Patients get model-based dose (using population PK parameters), dose adjusted based MAP Bayesian fit made using collected samples. Individual PK parameters randomly generated based interindividual variability described model, residual variability added sample collected using error model described model.","code":"res1 <- run_trial(   design = arm1,   data = dat,   cov_mapping = cov_mapping,   seed = 15,   progress = FALSE ) #> ℹ Starting simulations in 1 threads #> ℹ Post-processing results res2 <- run_trial(   design = arm2,   data = dat,   cov_mapping = cov_mapping,   seed = 15,   progress = FALSE ) #> ℹ Starting simulations in 1 threads #> ℹ Post-processing results"},{"path":"/articles/sample_timing_yaml.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"4. Analyze results","title":"Effect of sample timing (YAML example)","text":"interested AUC target attainment. target attainment compare two arms trial?  Target attainment high varied little two arms, providing evidence support move collecting two samples collecting single sample per dosing interval. simulating sampling strategy patient, can also look patient responded sampling strategy.  strong correlation final AUC two sampling strategies. patients -exposed -exposed strategies, others -target one strategy .","code":"results <- bind_rows(   res1$final_exposure %>% mutate(sampling_design = \"peak-trough\"),   res2$final_exposure %>% mutate(sampling_design = \"mid-interval\"), ) target_attainment <- results %>%   mutate(ontarget = ifelse(auc_true >= 400 & auc_true <= 600, 1, 0)) %>%   group_by(sampling_design) %>%   summarize(prop_on_target = 100 * mean(ontarget)) target_attainment %>%   ggplot() +     aes(x = sampling_design, y = prop_on_target) +     geom_bar(stat = \"identity\") +     theme_minimal() +     theme(       panel.grid.major.x = element_blank()     ) +     labs(       x = \"Sampling strategy\",       y = \"Percent on target (%)\"     ) data.frame(   peak_trough = res1$final_exposure$auc_true,   random = res2$final_exposure$auc_true ) %>%   ggplot() +     aes(x = peak_trough, y = random) +     geom_rect(       aes(xmin = 400, xmax = 600, ymin = -Inf, ymax = Inf),        fill = \"grey70\",       alpha = 0.05     ) +     geom_rect(       aes(ymin = 400, ymax = 600, xmin = -Inf, xmax = Inf),       fill = \"grey70\",       alpha = 0.05     ) +     geom_point() +     theme_minimal()"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Dose and interval adaptation (vancomycin)","text":"model-informed precision dosing can update doses, course can also reduce increase dosing interval length. can also studied using mipdtrial package.","code":"library(mipdtrial) library(dplyr)   # for easier data manipulation  #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidyr) library(ggplot2) # for plotting our results"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"define-the-trial-design","dir":"Articles","previous_headings":"","what":"1. Define the trial design","title":"Dose and interval adaptation (vancomycin)","text":"simulated trial two samples, peak trough collected dose 1 3. assume can update dose amount dosing interval dose 3 5 aim AUC24 400-600 mg*h/L day 6. create different regimen update designs dose-optimization interval- optimization. using Thomson (2009) model simulation estimation: trial arms, start dose estimated attain target exposure metrics based population PK parameters, assuming 12-hour interval. one arm trial, interval stay fixed 12 hours, arm, allow interval vary. Now can combine design choices two trial arm designs:","code":"tdm_design <- create_sampling_design(   offset = c(1, -1, 1, -1), # sample 1-hour before true trough, and at peak+1hr   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   at = c(1, 1, 3, 3),   anchor = \"dose\" ) target_design <- create_target_design(   targettype = \"auc24\",    targetmin = 400,   targetmax = 600,   at = 6,   anchor = \"day\" ) dose_update_design <- create_regimen_update_design(   at = c(3, 5),   anchor = \"dose\",   update_type = \"dose\",   dose_optimization_method = map_adjust_dose # fixed interval, optimize dose ) interval_update_design <- create_regimen_update_design(   at = c(3, 5),   anchor = \"dose\",   update_type = \"interval\",   dose_optimization_method = map_adjust_interval, # allow interval to vary   grid = c(6, 8, 12, 18, 24, 36, 48) # allowable intervals ) model_design <- create_model_design(lib = \"pkvancothomson\") initial_method <- create_initial_regimen_design(   method = model_based_starting_dose,   regimen = list(     interval = 12,     type = \"infusion\",     t_inf = 1   ),   settings = list(     auc_comp = 3,     dose_resolution = 250,     dose_grid = c(250, 5000, 250)   ) ) design1 <- create_trial_design(   sampling_design = tdm_design,    target_design = target_design,   regimen_update_design = dose_update_design, # arm 1   initial_regimen_design = initial_method,   sim_design = model_design, est_design = model_design )  design2 <- create_trial_design(   sampling_design = tdm_design,   target_design = target_design,   regimen_update_design = interval_update_design, # arm 2   initial_regimen_design = initial_method,   sim_design = model_design, est_design = model_design )"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Dose and interval adaptation (vancomycin)","text":"example, randomly generate set weights creatinine clearances (CRCLs) synthetic data set. See sampling_timing() vignette longer description. also need link covariates data set covariates expected model: check covariates required model use PKPDsim::get_model_covariates(): check covariates data set use colnames():","code":"set.seed(15) dat <- data.frame(   ID = 1:30,   weight = rnorm(30, 90, 25),               # kg, normally distributed   crcl = exp(rnorm(30, log(6), log(1.6)))   # L/hr, log-normally distributed  ) dat$CL_HEMO <- 0 # required covariate for our model PKPDsim::get_model_covariates(model_design$model) #> [1] \"WT\"      \"CRCL\"    \"CL_HEMO\" colnames(dat) #> [1] \"ID\"      \"weight\"  \"crcl\"    \"CL_HEMO\" cov_map <- c(   WT = \"weight\",    CRCL = \"crcl\",   CL_HEMO = \"CL_HEMO\" )"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"4. Simulate a trial!","title":"Dose and interval adaptation (vancomycin)","text":"Patients get model-based dose (using population PK parameters), adjust either dose interval based MAP Bayesian fit made using collected samples. Individual PK parameters randomly generated based interindividual variability described model, residual variability added sample collected using error model described model.","code":"res1 <- run_trial(   data = dat,   design = design1,   cov_mapping = cov_map,   progress = FALSE,   seed = 15 ) #> ℹ Starting simulations in 1 threads #> ℹ Post-processing results res2 <- run_trial(   data = dat,   design = design2,   cov_mapping = cov_map,   progress = FALSE,   seed = 15 ) #> ℹ Starting simulations in 1 threads #> ℹ Post-processing results"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"5. Analyze results","title":"Dose and interval adaptation (vancomycin)","text":"Let’s see well worked. figure plot steady state AUC attained using regimen updated time shown x-axis. expect time steady state AUC approach middle range closely, TDM available optimize dose. Since ’re keeping interval fixed, patient dose update times x-axis.  can intervan update algorithm:  plot results simulation, now see dose update times flexible, patient. see resulting steady state AUC24 also approaches middle targeted AUC range. shows dosing interval can also used easily obtain optimal drug exposure. can also look see intervals chosen per patient. patients stayed interval 12 hours throughout treatment course, patients, interval changed 1 times.","code":"ggplot(res1$dose_updates) +   aes(x = t, y = auc_before_update, group = id) +   geom_rect(     xmin = -Inf, xmax = Inf, ymin = 400, ymax = 600,     fill = \"#3870FA\", alpha = 0.2   ) +   geom_line() +   geom_point() +   xlab(\"Time of regimen update (Dose update algorithm)\") +    ylab(\"Resulting AUC at t=6 days (mg*h/L)\") ggplot(res2$dose_updates) +   aes(x = t, y = auc_before_update, group = id) +   geom_rect(     xmin = -Inf, xmax = Inf, ymin = 400, ymax = 600,     fill = \"#3870FA\", alpha = 0.2   ) +   geom_line() +   geom_point() +   xlab(\"Time of regimen update (Interval update algorithm)\") +    ylab(\"Resulting AUC at t=6 days (mg*h/L)\") res2$dose_updates %>%   ggplot() +     geom_bar(aes(x = as.factor(interval_before_update))) +     facet_wrap(~id) +     xlab(\"Interval\")"},{"path":"/articles/vancomycin_timevarying_targets.html","id":"define-the-trial-design","dir":"Articles","previous_headings":"","what":"1. Define the trial design","title":"Time-varying exposure targets (vancomycin)","text":"simulated trial two samples, peak trough collected dose 1 3. assume can update dose amount dose 3 7, aim AUC24 500 mg*h/L 300 dose 5 10, respectively. using Thomson (2009) model simulation estimation: start dose estimated attain target exposure metrics based population PK parameters, assuming 12-hour interval. Now can combine design choices single trial design:","code":"tdm_design <- create_sampling_design(   offset = c(1, -1, 1, -1), # sample 1-hour before true trough, and at peak+1hr   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   at = c(1, 1, 3, 3),   anchor = \"dose\" ) target_design <- create_target_design(   targettype = \"auc24\",    targetvalue = c(500, 300),   at = c(5, 10),   anchor = \"dose\" ) dose_update_design <- create_regimen_update_design(   at = c(3, 7),   anchor = \"dose\",   update_type = \"dose\",   dose_optimization_method = map_adjust_dose # fixed interval, optimize dose ) model_design <- create_model_design(lib = \"pkvancothomson\") initial_method <- create_initial_regimen_design(   method = model_based_starting_dose,   regimen = list(     interval = 12,     type = \"infusion\",     t_inf = 1,     n = 24   ),   settings = list(     auc_comp = 3,     dose_resolution = 250,     dose_grid = c(250, 5000, 250)   ) ) design <- create_trial_design(   sampling_design = tdm_design,    target_design = target_design,   regimen_update_design = dose_update_design, # arm 1   initial_regimen_design = initial_method,   sim_design = model_design, est_design = model_design )"},{"path":"/articles/vancomycin_timevarying_targets.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Time-varying exposure targets (vancomycin)","text":"example, randomly generate set weights creatinine clearances (CRCLs) synthetic data set. See sampling_timing() vignette longer description. also need link covariates data set covariates expected model: check covariates required model use PKPDsim::get_model_covariates(): check covariates data set use colnames():","code":"set.seed(15) dat <- data.frame(   ID = 1:30,   weight = rnorm(30, 90, 25),               # kg, normally distributed   crcl = exp(rnorm(30, log(6), log(1.6)))   # L/hr, log-normally distributed  ) dat$CL_HEMO <- 0 # required covariate for our model PKPDsim::get_model_covariates(model_design$model) #> [1] \"WT\"      \"CRCL\"    \"CL_HEMO\" colnames(dat) #> [1] \"ID\"      \"weight\"  \"crcl\"    \"CL_HEMO\" cov_map <- c(   WT = \"weight\",    CRCL = \"crcl\",   CL_HEMO = \"CL_HEMO\" )"},{"path":"/articles/vancomycin_timevarying_targets.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"4. Simulate a trial!","title":"Time-varying exposure targets (vancomycin)","text":"Patients get model-based dose (using population PK parameters), adjust dose based MAP Bayesian fit made using collected samples, first target AUC 500, later targeting AUC 300. Individual PK parameters randomly generated based interindividual variability described model, residual variability added sample collected using error model described model.","code":"covs <- create_cov_object(   dat,   mapping = cov_map ) model_based_starting_dose(   design = design,   covariates = covs,   cov_mapping = cov_mapping ) #>      t     type  amt t_inf #> 1    0 infusion 1500     1 #> 2   12 infusion 1500     1 #> 3   24 infusion 1500     1 #> 4   36 infusion 1500     1 #> 5   48 infusion 1500     1 #> 6   60 infusion 1500     1 #> 7   72 infusion 1500     1 #> 8   84 infusion 1500     1 #> 9   96 infusion 1500     1 #> 10 108 infusion 1500     1 res <- run_trial(   data = dat,   design = design,   cov_mapping = cov_map,   progress = FALSE,   seed = 15 ) #> ℹ Starting simulations in 1 threads #> ℹ Post-processing results"},{"path":"/articles/vancomycin_timevarying_targets.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"5. Analyze results","title":"Time-varying exposure targets (vancomycin)","text":"Let’s see well worked. figure plot steady state AUC attained using regimen updated time shown x-axis. expect time steady state AUC approach middle range closely, TDM available optimize dose. Since ’re keeping interval fixed, patient dose update times x-axis.","code":"ggplot(res$dose_updates) +   aes(x = t, y = auc_before_update, group = id) +   geom_hline(yintercept = c(300, 500), linetype = \"dotted\") +   geom_line() +   geom_point() +   xlab(\"Time of regimen update (Dose update algorithm)\") +    ylab(\"Resulting AUC at time points initial dose, and dose 3, 5 (mg*h/L)\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jasmine Hughes. Author, maintainer. Ron Keizer. Author. InsightRX. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hughes J, Keizer R (2025). mipdtrial: Simulate MIPD trials. R package version 0.0.0.2.","code":"@Manual{,   title = {mipdtrial: Simulate MIPD trials},   author = {Jasmine Hughes and Ron Keizer},   year = {2025},   note = {R package version 0.0.0.2}, }"},{"path":"/index.html","id":"mipdtrial","dir":"","previous_headings":"","what":"Simulate MIPD trials","title":"Simulate MIPD trials","text":"goal mipdtrial make easy simulate pharmacokinetic/ pharmacodynamic (PK/PD) endpoints response dose adaptation. Existing tools cumbersome use purpose. example, tools like NONMEM optimized model development, assume fixed regimens used simulation. algorithms, like sample optimization simulations, optimize information gain attainment clinically relevant metrics, AUC target attainment. mipdtrial fills niche helping users simulate PK/PD resulting dose adaptations informed past PK/PD readouts. example sorts questions: fewer patients receive therapeutic AUC change clinical protocol collecting peak trough sample collecting single mid-interval sample? might model misspecification impact patient target attainment? institution’s nomogram compare model-based dose?","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate MIPD trials","text":"can install development version mipdtrial GitHub : examples use package answer questions MIPD target attainment, check vignettes listed “Articles!”","code":"# install.packages(\"devtools\") devtools::install_github(\"InsightRX/mipdtrial\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulate MIPD trials","text":"use mipdtrial package, crucial understand concept “design” introduced package. main goal designs allow configuration flexible trials sampling regimen updates can depend prior regimen changes, dosing interval changed, still want sample dose 7 regardless dosing interval. , infusion lengths changed, still want sample peak sample. times pre-specified fixed flexibility possible. following designs need configured every trial simulation: sampling_design : determines timepoints samples taken. target_design: determines timepoint target measured, target . regimen_update_design : determines timepoint dose can updated response new information sampled using sampling_design, optimize dosing regimen. three designs can “anchored” specific dose day number. can also offset dosing time e.g. sample “peak” “trough” times. example set design simulated MIPD trial: vignettes show various additional examples set trial simulations using designs. find example MIPD trial design captured yet using functions, please let us know.","code":"## sample at peak (at 1-hour infusion end), and at true trough ## do this at dose #1 and #3 tdm_design <- create_sampling_design(   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   at = c(1, 1, 3, 3),   anchor = \"dose\" )  ## Now sample slightly more realistically, half an hour after infusion end, ## and half an hour before true trough. We can use `offset` for this: tdm_design <- create_sampling_design(   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   offset = c(0.5, -0.5, 0.5, -0.5),    at = c(1, 1, 3, 3),   anchor = \"dose\" )  ## If you know the sampling times and dosing intervals are not going  ## to change during the trial, you could also specify this design simply ## using fixed times as: (assuming 12-hour intervals) tdm_design <- create_sampling_design(     time = c(1.5, 11.5, 25.5, 35.5) )  ## For targets, we follow broadly the same concept. To target an AUC4 of  ## 400-600 at day 6, we can write: target_design <- create_target_design(   targettype = \"auc24\",    targetmin = 400,   targetmax = 600,   at = 6,   anchor = \"day\" )  ## And for regimen update designs, it works similar as well. The following code ## implements dose updates at dose #3 and #5, using a MAP-based optimization. dose_update_design <- create_regimen_update_design(   at = c(3, 5),   anchor = \"dose\",   update_type = \"dose\",   dose_optimization_method = map_adjust_dose )"},{"path":"/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Simulate MIPD trials","text":"mipdtrial package currently development, likely changes core functionality upcoming months. Features thar short-term roadmap: Add optimization functions Add initial dosing functions Add functionality generate realistic trial scenarios","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Simulate MIPD trials","text":"welcome input community: think encountered bug, please submit issue GitHub page. Please include reproducible example unexpected behavior. Please open pull request fix updates improve package. ’re sure proposed changes useful within scope package, feel free contact one authors package.","code":""},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Simulate MIPD trials","text":"functionality R package provided “”. authors adhere software development best practices, software may still contain unintended errors. InsightRX Inc. authors package can held liable damages resulting use software. use software package, user waives warranties, expressed implied, including warranties accuracy, quality suitability InsightRX particular purpose, either medical non-medical. ©","code":""},{"path":"/reference/adjust_dose_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","title":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","text":"Checks dose_update_number obtained dose_update scheme","code":""},{"path":"/reference/adjust_dose_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","text":"","code":"adjust_dose_checks(adjust_at_dose, regimen)"},{"path":"/reference/adjust_dose_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","text":"adjust_at_dose number dose adjust regimen PKPDsim regimen","code":""},{"path":"/reference/bind_results_from_adjustments.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind together the results from sampling and dose adjusting — bind_results_from_adjustments","title":"Bind together the results from sampling and dose adjusting — bind_results_from_adjustments","text":"Bind together results sampling dose adjusting","code":""},{"path":"/reference/bind_results_from_adjustments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind together the results from sampling and dose adjusting — bind_results_from_adjustments","text":"","code":"bind_results_from_adjustments(   out,   j,   regimen,   adjust_at_dose,   dose_before_update,   auc_final,   trough_final )"},{"path":"/reference/bind_results_from_adjustments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind together the results from sampling and dose adjusting — bind_results_from_adjustments","text":"output object j index number regimen regimen adjust_at_dose adjust dose number dose_before_update dose update auc_final final AUC trough_final final Ctrough","code":""},{"path":"/reference/bind_results_from_adjustments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind together the results from sampling and dose adjusting — bind_results_from_adjustments","text":"data.frame results","code":""},{"path":"/reference/bind_sim_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind simulated subject-level output together — bind_sim_output","title":"Bind simulated subject-level output together — bind_sim_output","text":"Binds data list containing individual simulations data.frames summarises trial results).","code":""},{"path":"/reference/bind_sim_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind simulated subject-level output together — bind_sim_output","text":"","code":"bind_sim_output(res)"},{"path":"/reference/bind_sim_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind simulated subject-level output together — bind_sim_output","text":"res temporary result object (list) run_trial()","code":""},{"path":"/reference/bind_sim_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind simulated subject-level output together — bind_sim_output","text":"list various data.frames summaries trial","code":""},{"path":"/reference/calc_auc_from_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Get AUC from a simulation — calc_auc_from_sim","title":"Get AUC from a simulation — calc_auc_from_sim","text":"Get AUC simulation","code":""},{"path":"/reference/calc_auc_from_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get AUC from a simulation — calc_auc_from_sim","text":"","code":"calc_auc_from_sim(sim_output, auc_comp, extract_time, target_type)"},{"path":"/reference/calc_auc_from_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get AUC from a simulation — calc_auc_from_sim","text":"sim_output output PKPDsim::sim call auc_comp auc compartment extract_time time points AUC12 24 extract target_type type AUC target c(\"auc24\", \"auc12\", \"cum_auc\").","code":""},{"path":"/reference/calc_auc_from_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get AUC from a simulation — calc_auc_from_sim","text":"calc_auc_from_sim returns numeric vector AUCs simulated time point. Control time period AUC calculated using target_time argument PKPDsim::sim.","code":""},{"path":"/reference/calc_time_to_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate time to target attainment — calc_time_to_target","title":"Calculate time to target attainment — calc_time_to_target","text":"AUC targets, function returns first time start dosing interval plus infusion length AUC24 12 target.","code":""},{"path":"/reference/calc_time_to_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate time to target attainment — calc_time_to_target","text":"","code":"calc_time_to_target(regimen, target_design, auc_comp, model, ...)"},{"path":"/reference/calc_time_to_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate time to target attainment — calc_time_to_target","text":"regimen PKPDsim regimen object target_design target design, created using create_target_design() auc_comp compartment look AUC model PKPDsim model object ... arguments passed PKPDsim::sim","code":""},{"path":"/reference/calc_time_to_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate time to target attainment — calc_time_to_target","text":"numeric value indicating time, hours, dosing interval contained target metric within range. Returns Inf target never achieved. Returns NA target type supported.","code":""},{"path":"/reference/calc_time_to_target.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate time to target attainment — calc_time_to_target","text":"trough targets, returns time start dosing interval plus infusion length immediately prior trough target (.e. dose + infusion length first dose brought trough target).","code":""},{"path":"/reference/check_trial_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Check design — check_trial_design","title":"Check design — check_trial_design","text":"Check design","code":""},{"path":"/reference/check_trial_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check design — check_trial_design","text":"","code":"check_trial_design(design)"},{"path":"/reference/check_trial_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check design — check_trial_design","text":"design trial design object","code":""},{"path":"/reference/check_trial_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check design — check_trial_design","text":"trial design object","code":""},{"path":"/reference/check_when.html","id":null,"dir":"Reference","previous_headings":"","what":"Check / clean when element — check_when","title":"Check / clean when element — check_when","text":"Check / clean element","code":""},{"path":"/reference/check_when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check / clean when element — check_when","text":"","code":"check_when(when, offset, at)"},{"path":"/reference/check_when.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check / clean when element — check_when","text":"character vector length time (single value) determining interpret provided sampling time. NULL use dose time offset (default). options : cmax peak, use end infusion base time, cmin trough, use time next dose offset, middle cmid use middle anchored dose next, random takes random time point anchored dose next. offset offset standardized PK moments specified , e.g. c(1, -1) = c(\"peak\", \"trough\") sample 1 hour peak 1 hour trough. numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day.","code":""},{"path":"/reference/collect_tdms.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate TDM collection — collect_tdms","title":"Simulate TDM collection — collect_tdms","text":"Using \"ground truth\" model, simulate collection drug/biomarker levels. Returns data frame sample time, true value, measured value (residual error added).","code":""},{"path":"/reference/collect_tdms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate TDM collection — collect_tdms","text":"","code":"collect_tdms(sim_model, t_obs, res_var, pars_i, lloq = NULL, ...)"},{"path":"/reference/collect_tdms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate TDM collection — collect_tdms","text":"sim_model model used simulated patient response (\"truth\"). t_obs sample collection times (since start treatment) res_var data frame residual variability quantities add. See pregenerate_ruv details. Expects columns prop add. Error added linear domain, log-transformed models supply error proportional error 0 additive error. pars_i true parameters individual (named list) lloq lower limit quantification. non-NULL, TDMs LLOQ set half LLOQ. ... arguments passed PKPDsim::sim","code":""},{"path":"/reference/collect_tdms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate TDM collection — collect_tdms","text":"data frame columns t (time), true_y (actual level) y (measured level), rows corresponding t_obs.","code":""},{"path":"/reference/create_cov_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of PKPDsim covariates for modeling — create_cov_object","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"Data sets typically come rectangular formats MIPD trials model individual separately. PKPDsim expects covariates provided list PKPDsim covariates. function helps convert rectangular (wide) data model-ready covariates.","code":""},{"path":"/reference/create_cov_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"","code":"create_cov_object(dat_i, mapping, implementation = NULL, time_column = NULL)"},{"path":"/reference/create_cov_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"dat_i rectangular data set, containing rows individual mapping named vector list indicating columns extract, covariate names expected model. Names model covariates values data frame column names. implementation named vector indicating covariate implementation, one c(\"interpolate\", \"locf\"). NULL, assumes \"interpolate\" covariates. See PKPDsim::new_covariate details. Names model covariates values implementation method. time_column covariates time-varying, supply column time. Otherwise, initial value taken covariates.","code":""},{"path":"/reference/create_cov_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"Returns named list PKPDsim covariates.","code":""},{"path":"/reference/create_cov_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"data assumed already numeric (e.g., categorical covariates like smoking status already mapped 1 0). function returns NULL required columns missing NA.","code":""},{"path":"/reference/create_cov_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"","code":"dat <- data.frame(ID = 1, weight = 70, CRCL = 4) mapping <- c(WT = \"weight\", CRCL = \"CRCL\") create_cov_object(dat, mapping) #> $WT #>   value times      unit implementation #> 1    70     0 undefined    interpolate #>  #> $CRCL #>   value times      unit implementation #> 1     4     0 undefined    interpolate #>"},{"path":"/reference/create_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","title":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","text":"function used three functions create_sampling_design(), create_regimen_update_design() create_target_design(), intended direct usage.","code":""},{"path":"/reference/create_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","text":"","code":"create_design(   time = NULL,   when = NULL,   offset = NULL,   scatter = NULL,   at = NULL,   anchor = c(\"dose\", \"day\") )"},{"path":"/reference/create_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","text":"time vector numeric values. values specified, used fixed sampling times simulated trial. values supplied, sampling times  calculated adaptively trial. determine dose day used reference, time relative specified anchor. character vector length time (single value) determining interpret provided sampling time. NULL use dose time offset (default). options : cmax peak, use end infusion base time, cmin trough, use time next dose offset, middle cmid use middle anchored dose next, random takes random time point anchored dose next. offset offset standardized PK moments specified , e.g. c(1, -1) = c(\"peak\", \"trough\") sample 1 hour peak 1 hour trough. scatter optional random variation time, specified standard deviation, e.g. scatter = 0.1 allow variation sampling time SD 0.1 hours. relevant sampling times, regimen_update designs target designs. Random variation protect peaks troughs becoming sampled infusion previous / next dose. value scatter chosen appropriately probably used conjunction approriate offset values. numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed.","code":""},{"path":"/reference/create_eval_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create evaluation object — create_eval_design","title":"Create evaluation object — create_eval_design","text":"function defines evaluation metric timing non-target metrics. Use function record outputs simulation like troughs AUC target times.","code":""},{"path":"/reference/create_eval_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create evaluation object — create_eval_design","text":"","code":"create_eval_design(   evaltype = mipd_target_types(),   time = NULL,   when = NULL,   offset = NULL,   at = NULL,   anchor = c(\"dose\", \"day\") )"},{"path":"/reference/create_eval_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create evaluation object — create_eval_design","text":"evaltype evaluation metric(s) use. Types mipd_target_types() time vector numeric values measure optimize target. cases time required argument, inferred targettype. values supplied, target times calculated adaptively trial. determine dose used reference anchor. time relative specified . values specified, time values used fixed absolute target times simulated trial. character vector length time (single value) determining interpret provided target time. NULL use dose time offset (default). options cmax peak, use end infusion base time, cmin trough, use time next dose offset. offset offset moment (dose, peak, trough). numeric vector dose day number \"anchor\" target times . Vector needs length t. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed.","code":""},{"path":"/reference/create_initial_regimen_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a design for the initial regimen for patients in the trial — create_initial_regimen_design","title":"Creates a design for the initial regimen for patients in the trial — create_initial_regimen_design","text":"Creates design initial regimen patients trial","code":""},{"path":"/reference/create_initial_regimen_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a design for the initial regimen for patients in the trial — create_initial_regimen_design","text":"","code":"create_initial_regimen_design(method, ...)"},{"path":"/reference/create_initial_regimen_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a design for the initial regimen for patients in the trial — create_initial_regimen_design","text":"method function call. function always return PKPDsim regimen object. ... options passed depending method. Commonly includes regimen, named list arguments passed PKPDsim::new_regimen (see examples)","code":""},{"path":"/reference/create_initial_regimen_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a design for the initial regimen for patients in the trial — create_initial_regimen_design","text":"list object design specs","code":""},{"path":"/reference/create_initial_regimen_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a design for the initial regimen for patients in the trial — create_initial_regimen_design","text":"","code":"create_initial_regimen_design(   method = weight_based_starting_dose,   mgkg = 15,   dosing_weight = \"total_body_weight\",   regimen = list(     interval = 12,     n = 10,     t_inf = 1,     type = \"infusion\"   ) ) #> $method #> function (covariates, design, cov_mapping)  #> { #>     reg_def <- design$initial_regimen$regimen #>     if (is.null(design$initial_regimen$mgkg)) { #>         cli::cli_abort(paste0(\"For weight-based initial dosing, \",  #>             \"specify `create_initial_regimen_design(mgkg = ...)`\")) #>     } #>     if (is.null(design$initial_regimen$dosing_weight)) { #>         cli::cli_abort(paste0(\"For weight-based initial dosing, \",  #>             \"specify `create_initial_regimen_design(dosing_weight = ...)`\")) #>     } #>     cov_for_dosing <- names(which(cov_mapping == design$initial_regimen$dosing_weight)) #>     if (is.null(cov_for_dosing) || length(cov_for_dosing) ==  #>         0) { #>         cli::cli_abort(\"dosing_weight covariate missing from `cov_mapping`\") #>     } #>     weight_for_dosing <- covariates[[cov_for_dosing]]$value #>     if (is.null(weight_for_dosing)) { #>         cli::cli_abort(\"Dosing weight not available in data set\") #>     } #>     reg_def$amt <- weight_for_dosing * design$initial_regimen$mgkg #>     do.call(PKPDsim::new_regimen, reg_def) #> } #> <bytecode: 0x564335b33eb8> #> <environment: namespace:mipdtrial> #>  #> $mgkg #> [1] 15 #>  #> $dosing_weight #> [1] \"total_body_weight\" #>  #> $regimen #> $regimen$interval #> [1] 12 #>  #> $regimen$n #> [1] 10 #>  #> $regimen$t_inf #> [1] 1 #>  #> $regimen$type #> [1] \"infusion\" #>  #>"},{"path":"/reference/create_model_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a design for models to be used — create_model_design","title":"Create a design for models to be used — create_model_design","text":"function used setting model used simulation well estimation. use PKPDsim models defined installation, supplying model string using lib argument likely easiest. modify model parameters error models (e.g., sensitivity analysis), arguments provide convenient API.","code":""},{"path":"/reference/create_model_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a design for models to be used — create_model_design","text":"","code":"create_model_design(   lib = NULL,   model = NULL,   parameters = NULL,   omega_matrix = NULL,   ruv = NULL )"},{"path":"/reference/create_model_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a design for models to be used — create_model_design","text":"lib PKPDsim model name, string. model PKPDsim model object parameters model parameters, named list omega_matrix omega matrix, provided numeric vector containing lower diagonal omega matrix. ruv residual error model, named list","code":""},{"path":"/reference/create_model_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a design for models to be used — create_model_design","text":"","code":"if (FALSE) { # \\dontrun{ create_model_design(\"pkbusulfanmccune\") requireNamespace(\"pkbusulfanmccune\") create_model_design(   model = model,   parameters = list(     CL = 2.99, V = 0.675, Q = 2.28, V2 = 0.732,     TH_CRCL = 0.0154, TDM_INIT = 0   ),   omega_matrix = c(0.0729, 0.01, 0.0225, 0, 0, 0.2401, 0, 0, 0, 1.69),   ruv = list(prop = 0.1, add = 5) ) } # }"},{"path":"/reference/create_regimen_update_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"Create scheme updating dose interval dose optimization trial","code":""},{"path":"/reference/create_regimen_update_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"","code":"create_regimen_update_design(   at,   anchor,   update_type = c(\"dose\", \"interval\"),   dose_optimization_method = map_adjust_dose,   ... )"},{"path":"/reference/create_regimen_update_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed. update_type update either future dose (default) interval. dose_optimization_method function determines doses adjusted given collected drug levels. function must return named list structure list(regimen = reg, additional_info = x), reg updated PKPDsim regimen patient x can another information useful post-processing trial results. ... arguments passed dose_optimization_method","code":""},{"path":"/reference/create_regimen_update_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"","code":"create_regimen_update_design(   at = c(2, 5, 8),   anchor = \"dose\" ) #> $dose_optimization_method #> function (tdms, est_model, parameters, omega, ruv, regimen, covariates = NULL,  #>     target_design, dose_update, grid = NULL, ...)  #> { #>     fit <- simulate_fit(est_model = est_model, parameters = parameters,  #>         omega = omega, ruv = ruv, tdms = tdms, covariates = covariates,  #>         regimen = regimen, ...) #>     if (!all(c(\"parameters\", \"pred\", \"ipred\", \"dv\", \"weights\") %in%  #>         names(fit))) { #>         cli::cli_warn(\"Fit error, please investigate. Continuing but using population estimates.\") #>         est_par <- parameters #>         gof <- data.frame(pred = NA, ipred = NA, dv = NA, weights = NA) #>     } #>     else { #>         est_par <- fit$parameters #>         gof <- data.frame(pred = fit$pred, ipred = fit$ipred,  #>             dv = fit$dv, weights = fit$weights) #>     } #>     if (is.null(grid)) { #>         d1 <- regimen$dose_amts[1] #>         grid <- seq(d1/5, d1 * 5, length.out = 10) #>     } #>     new_dose <- dose_grid_search(est_model = est_model, regimen = regimen,  #>         parameters = est_par, target_design = target_design,  #>         auc_comp = PKPDsim::get_model_auc_compartment(est_model),  #>         dose_update = dose_update, grid = grid, grid_type = \"dose\",  #>         covariates = covariates, iov_bins = PKPDsim::get_model_iov(est_model)$bins,  #>         dose_resolution = NULL, ...) #>     regimen <- update_regimen(regimen, new_dose = new_dose, dose_update_number = dose_update) #>     list(regimen = regimen, dose_update = dose_update, new_dose = new_dose,  #>         new_interval = NA, additional_info = est_par, gof = gof) #> } #> <bytecode: 0x564330b27be8> #> <environment: namespace:mipdtrial> #>  #> $scheme #>   base offset at anchor scatter update_type #> 1 dose      0  2   dose       0        dose #> 2 dose      0  5   dose       0        dose #> 3 dose      0  8   dose       0        dose #>  #> $args #> list() #>  create_regimen_update_design(   at = c(4, 8),   anchor = \"day\",   update_type = \"interval\",   dose_optimization_method = map_adjust_interval ) #> $dose_optimization_method #> function (tdms, est_model, parameters, omega, ruv, regimen, covariates = NULL,  #>     target_design, dose_update, grid = NULL, ...)  #> { #>     fit <- simulate_fit(est_model = est_model, parameters = parameters,  #>         omega = omega, ruv = ruv, tdms = tdms, covariates = covariates,  #>         regimen = regimen, ...) #>     if (\"error\" %in% class(fit)) { #>         cli::cli_abort(\"Fit to simulated data failed, please check model and simulation designs.\") #>     } #>     est_par <- fit$parameters #>     gof <- data.frame(pred = fit$pred, ipred = fit$ipred, dv = fit$dv,  #>         weights = fit$weights) #>     if (is.null(grid)) { #>         cli::cli_abort(\"Interval-optimization requires `grid` argument.\") #>     } #>     new_interval <- dose_grid_search(est_model = est_model, regimen = regimen,  #>         parameters = est_par, target_design = target_design,  #>         auc_comp = PKPDsim::get_model_auc_compartment(est_model),  #>         dose_update = dose_update, grid = grid, grid_type = \"interval\",  #>         covariates = covariates, iov_bins = PKPDsim::get_model_iov(est_model)$bins,  #>         verbose = TRUE, ...) #>     regimen <- update_regimen(regimen, new_interval = new_interval,  #>         dose_update_number = dose_update) #>     list(regimen = regimen, dose_update = dose_update, new_dose = NA,  #>         new_interval = new_interval, additional_info = est_par,  #>         gof = gof) #> } #> <bytecode: 0x564336577360> #> <environment: namespace:mipdtrial> #>  #> $scheme #>   base offset at anchor scatter update_type #> 1 dose      0  4    day       0    interval #> 2 dose      0  8    day       0    interval #>  #> $args #> list() #>"},{"path":"/reference/create_sampling_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for creating sampling designs. — create_sampling_design","title":"Function for creating sampling designs. — create_sampling_design","text":"Sampling times can usually pre-specified dosing schedule fixed. case scheme can specified static timepoints e.g. time = c(1, 7.5, 25, 31.5) taking peak-trough samples dose 1 4 8-hour regimen. However, dosing interval adaptive, peak trough sampling times stay static adapted --fly simulations. case, possible use specify sampling peak, trough dose concentrations. case, time allowed. exact peak trough concentrations sample, use offset parameter sample e.g. hour post-peak, shortly true troughs.","code":""},{"path":"/reference/create_sampling_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for creating sampling designs. — create_sampling_design","text":"","code":"create_sampling_design(   time = NULL,   when = NULL,   offset = NULL,   scatter = NULL,   at = NULL,   lloq = 0,   anchor = c(\"dose\", \"day\") )"},{"path":"/reference/create_sampling_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for creating sampling designs. — create_sampling_design","text":"time vector numeric values. values specified, used fixed sampling times simulated trial. values supplied, sampling times  calculated adaptively trial. determine dose day used reference, time relative specified anchor. character vector length time (single value) determining interpret provided sampling time. NULL use dose time offset (default). options : cmax peak, use end infusion base time, cmin trough, use time next dose offset, middle cmid use middle anchored dose next, random takes random time point anchored dose next. offset offset standardized PK moments specified , e.g. c(1, -1) = c(\"peak\", \"trough\") sample 1 hour peak 1 hour trough. scatter optional random variation time, specified standard deviation, e.g. scatter = 0.1 allow variation sampling time SD 0.1 hours. relevant sampling times, regimen_update designs target designs. Random variation protect peaks troughs becoming sampled infusion previous / next dose. value scatter chosen appropriately probably used conjunction approriate offset values. numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. lloq lower limit quantification TDMs anchor either day dose. Single value required, .e. anchor types mixed.","code":""},{"path":"/reference/create_sampling_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for creating sampling designs. — create_sampling_design","text":"","code":"# to sample at 1.5/8.5/23.5 hours create_sampling_design(time = c(1.5, 11.5, 23.5)) #> $lloq #> [1] 0 #>  #> $scheme #>   base offset at anchor #> 1 dose    1.5  1   dose #> 2 dose   11.5  1   dose #> 3 dose   23.5  1   dose #>   # to sample at the peak (end of infusion) and trough (start of # next dose) of each dose create_sampling_design(   when = c(\"peak\", \"trough\") ) #> $lloq #> [1] 0 #>  #> $scheme #>     base offset at anchor scatter #> 1   peak      0  1   dose       0 #> 2 trough      0  1   dose       0 #>   # to sample 30 min post-peak and 30-min pre-trough for the first dose create_sampling_design(   when = c(\"peak\", \"trough\"),   offset = c(0.5, -0.5),   at = c(1, 1) ) #> $lloq #> [1] 0 #>  #> $scheme #>     base offset at anchor scatter #> 1   peak    0.5  1   dose       0 #> 2 trough   -0.5  1   dose       0 #>   # The same as above, but now for the first and third dose create_sampling_design(   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   offset = c(0.5, -0.5, 0.5, -0.5),   at = c(1, 1, 3, 3),   anchor = \"dose\" ) #> $lloq #> [1] 0 #>  #> $scheme #>     base offset at anchor scatter #> 1   peak    0.5  1   dose       0 #> 2 trough   -0.5  1   dose       0 #> 3   peak    0.5  3   dose       0 #> 4 trough   -0.5  3   dose       0 #>"},{"path":"/reference/create_target_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create target object — create_target_design","title":"Create target object — create_target_design","text":"function helps user define PKPD target simulation. minimum value maximum value supplied, algorithm targets mid- point. Alternatively, single midpoint can supplied.","code":""},{"path":"/reference/create_target_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create target object — create_target_design","text":"","code":"create_target_design(   targettype = mipd_target_types(),   targetmin = NULL,   targetmax = NULL,   targetvalue = NULL,   single_point_variation = 0.2,   time = NULL,   when = NULL,   offset = NULL,   at = NULL,   anchor = c(\"dose\", \"day\") )"},{"path":"/reference/create_target_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create target object — create_target_design","text":"targettype target type, one accepted types (see mipd_target_types()) targetmin minimum value acceptable, must specified targetmax. Can vector. case, length match length vector-arguments function, length regimen update occasions. targetmax maximum value acceptable, must specified targetmin. Can vector. case, length match length vector-arguments function, length regimen update occasions. targetvalue value target, overrides min max values. Can vector. case, length match length vector-arguments function, length regimen update occasions. single_point_variation acceptable variation targetvalue. default 20%. Considered assessment target attainment posteriori, used dose-finding logic. time vector numeric values measure optimize target. cases time required argument, inferred targettype. values supplied, target times calculated adaptively trial. determine dose used reference anchor. time relative specified . values specified, time values used fixed absolute target times simulated trial. character vector length time (single value) determining interpret provided target time. NULL use dose time offset (default). options cmax peak, use end infusion base time, cmin trough, use time next dose offset. offset offset moment (dose, peak, trough). numeric vector dose day number \"anchor\" target times . Vector needs length t. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed.","code":""},{"path":"/reference/create_target_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create target object — create_target_design","text":"","code":"## Target cumulative AUC, always exactly at 72 hours: create_target_design(   targettype = \"cum_auc\",   targetvalue = 90,   time = 72 ) #> $type #> [1] \"cum_auc\" #>  #> $value #> [1] 90 #>  #> $min #> [1] 72 #>  #> $max #> [1] 108 #>  #> $scheme #>   base offset at anchor #> 1 dose     72  1   dose #>   ## Target trough concentration at trough after dose 4. create_target_design(   targettype = \"cmin\",   targetvalue = 15,   at = 4,   anchor = \"dose\" ) #> $type #> [1] \"cmin\" #>  #> $value #> [1] 15 #>  #> $min #> [1] 12 #>  #> $max #> [1] 18 #>  #> $scheme #>   base offset at anchor scatter #> 1 cmin      0  4   dose       0 #>   ## Target AUC24 over day 4 create_target_design(   targettype = \"auc24\",   targetvalue = 500,   at = 4,   anchor = \"day\" ) #> $type #> [1] \"auc24\" #>  #> $value #> [1] 500 #>  #> $min #> [1] 400 #>  #> $max #> [1] 600 #>  #> $scheme #>   base offset at anchor scatter #> 1 dose     24  4    day       0 #>   ## Target cmin first at dose 4 (15 mg/L), then at dose 8 (25 mg/L) create_target_design(   targettype = \"cmin\",   targetvalue = c(15, 25),   at = c(4, 8),   anchor = \"day\" ) #> $type #> [1] \"cmin\" #>  #> $value #> [1] 15 25 #>  #> $min #> [1] 12 20 #>  #> $max #> [1] 18 30 #>  #> $scheme #>   base offset at anchor scatter #> 1 cmin      0  4    day       0 #> 2 cmin      0  8    day       0 #>"},{"path":"/reference/create_trial_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine all sub-designs into the overall trial design object — create_trial_design","title":"Combine all sub-designs into the overall trial design object — create_trial_design","text":"Combine sub-designs overall trial design object","code":""},{"path":"/reference/create_trial_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine all sub-designs into the overall trial design object — create_trial_design","text":"","code":"create_trial_design(   file = NULL,   sampling_design = NULL,   target_design = NULL,   initial_regimen_design = NULL,   regimen_update_design = NULL,   sim_design = NULL,   est_design = NULL,   eval_design = NULL )"},{"path":"/reference/create_trial_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine all sub-designs into the overall trial design object — create_trial_design","text":"file YAML file subdesigns sampling_design Design sampling, create_sampling_design() target_design Design target attainment, create_target_design() initial_regimen_design Design initial regimen, create_initial_regimen_design() regimen_update_design Design dose/regimen optimization, create_regimen_update_design() sim_design Design simulation model, create_model_design() est_design Design estimation, create_model_design() eval_design Design evaluation metrics, create_eval_design()","code":""},{"path":"/reference/dose_grid_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"Set refine = TRUE model nonlinear grid search happens iteratively.","code":""},{"path":"/reference/dose_grid_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"","code":"dose_grid_search(   est_model = NULL,   regimen,   target_design = create_target_design(targettype = \"conc\", targetvalue = 10, time = 24),   auc_comp = NULL,   pta = NULL,   omega = NULL,   ruv = NULL,   dose_update = 1,   grid = seq(1, 6000, by = 10),   grid_type = \"dose\",   dose_resolution = 1,   refine = NULL,   refine_range = c(0.7, 1.4),   check_boundaries = TRUE,   max_dose = NULL,   min_dose = NULL,   md = list(),   parameters = NULL,   covariates = NULL,   verbose = FALSE,   ... )"},{"path":"/reference/dose_grid_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"est_model model used estimation (\"clinician facing\") regimen PKPDsim regimen object target_design object specifying target design, created using function create_target_design() auc_comp auc compartment (starting 1, R-style C-style!) pta probability target attainment, list arguments type value, also requires omega non-NULL. NULL, just aim specific conc auc. omega IIV matrix, estimation model, probability target attainment target types. ruv list specifying residual error estimation model: list(prop = 0.1, add = 1.5), probability target attainment target types. dose_update update dose dose? grid vector specifying doses intervals use test grid, Example: seq(= 50, = 500, = (500 - 50) / 10) grid_type either \"dose\" \"interval\" dose_resolution precision output rounded (e.g. 50), useful practice specific set dose units. Can course also controlled altering grid. refine found optimal dose refined ? specified, refine model linearity (attr(model, \"misc\")) described \"linear\" refine_range initial optimization, second refinement step implemented? refine_range specified e.g. c(0.9, 1.1) implement second optimization using grid spanning 90% 110% initial optimal dose. Useful non-linear models. check_boundaries optimal dose lower/upper boundary grid, grid expanded? max_dose maximum dose cap min_dose minimum dose cap md metadata object (needed use get_quantity_from_variable() generate target value) parameters list model parameters covariates covariates object verbose verbose output? ... passed PKPDsim function","code":""},{"path":"/reference/dose_grid_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"numeric value indicating recommended dose","code":""},{"path":"/reference/exposure_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate exposure metrics — exposure_metrics","title":"Calculate exposure metrics — exposure_metrics","text":"Calculates drug concentration area curve (AUC) MIPD trial run.","code":""},{"path":"/reference/exposure_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate exposure metrics — exposure_metrics","text":"","code":"calc_concentration_from_regimen(regimen, parameters, model, target_design, ...)  calc_auc_from_regimen(regimen, parameters, model, target_design, ...)"},{"path":"/reference/exposure_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate exposure metrics — exposure_metrics","text":"regimen PKPDsim regimen object parameters use MAP estimation get estimated exposure, use true patient parameters get true exposure. Parameters must correspond model used. Accepts parameters supplied data frame row, named vector list. model model use exposure calculations. target_design target design, created using create_target_design() ... arguments passed PKPDsim::sim. Typical arguments include covariates iov_bins","code":""},{"path":"/reference/exposure_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate exposure metrics — exposure_metrics","text":"calc_concentration_from_regimen returns numeric vector concentrations simulated time point. Control concentration estimated using target_time. calc_auc_from_regimen returns numeric vector AUCs simulated time point. Control time period AUC calculated using target_time.","code":""},{"path":"/reference/exposure_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate exposure metrics — exposure_metrics","text":"family functions calculates exposure metric given regimen, model, model parameters, target design. Supply final regimen final parameter estimates get final estimated exposure metric. Supply final regimen true individual parameter estimates get final true exposure metric.","code":""},{"path":"/reference/filter_rows_0_100.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rows with values 0 or 100 — filter_rows_0_100","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"Remove rows 0 1 least 2 non-(0,1) rows, otherwise keep highest 0 row lowest 1 row.","code":""},{"path":"/reference/filter_rows_0_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"","code":"filter_rows_0_100(tab)"},{"path":"/reference/filter_rows_0_100.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"tab data frame columns dose y","code":""},{"path":"/reference/filter_rows_0_100.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"Taken proprietary package, written Kara Woo.","code":""},{"path":"/reference/generate_variability.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate variability terms — generate_variability","title":"Generate variability terms — generate_variability","text":"enable comparison multiple treatment conditions reproducible manner, recommended interindividual variability terms residual variability terms generated prior analyses. design also allows resuming simulation part-way , random seed position may known. Generate IIV one individuals one iterations per individual according supplied omega matrix. Generate unexplained variability one individuals one iterations per individual according supplied proportional additive error.","code":""},{"path":"/reference/generate_variability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate variability terms — generate_variability","text":"","code":"generate_iiv(   sim_model,   omega,   parameters,   ids = 1,   n_iter = 1,   seed = NULL,   ... )  generate_ruv(tdm_sample_time, prop, add, ids = 1, n_iter = 1, seed = NULL)"},{"path":"/reference/generate_variability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate variability terms — generate_variability","text":"sim_model model used simulated patient response (\"truth\"). omega omega matrix, covariance terms. See PKPDsim::sim details. parameters simulation model parameters (population estimates), named list. ids vector ids, can numeric character. n_iter number sets individual parameters generate per id seed set random seed ... arguments passed PKPDsim::sim tdm_sample_time time tdm, since start treatment course (vector identifiers use tdm). example, three days daily dosing peak-trough sample collection, c(1, 24, 25, 48, 49, 73). prop proportional error add additive error","code":""},{"path":"/reference/generate_variability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate variability terms — generate_variability","text":"generate_iiv data frame columns id (corresponding ids), iter ( numbers 1 n_iter) columns individual parameter value. generate_ruv returns data frame identifier columns tdm_number, iteration, id, plus columns proportional (prop) additive (add) error.","code":""},{"path":"/reference/generate_variability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate variability terms — generate_variability","text":"family functions generates variability terms allow reproducible analyses. Using multiple iterations per individual ID allows PK variability within one set covariates. default, generate_iivassumes log-normal (exponential) distribution. See PKPDsim::sim documentation omega_type argument provide finer grain control. generate_ruv Assumes normal distribution proportional additional error.","code":""},{"path":"/reference/get_dose_update_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","title":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","text":"Core function calculate dose update number row regimen update data.frame","code":""},{"path":"/reference/get_dose_update_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","text":"","code":"get_dose_update_core(row, regimen)"},{"path":"/reference/get_dose_update_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","text":"row single row regimen_update data.frame regimen PKPDsim regimen","code":""},{"path":"/reference/get_dose_update_numbers_from_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"Get dose number update dose/interval regime update scheme provided regimen.","code":""},{"path":"/reference/get_dose_update_numbers_from_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"","code":"get_dose_update_numbers_from_design(design, regimen)"},{"path":"/reference/get_dose_update_numbers_from_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"design regimen update design created using create_regimen_update_design() regimen PKPDsim regimen object","code":""},{"path":"/reference/get_dose_update_numbers_from_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"vector dose numbers update ","code":""},{"path":"/reference/get_quantity_from_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quantities from variables in sim results — get_quantity_from_variable","title":"Get quantities from variables in sim results — get_quantity_from_variable","text":"Used add quantities rows advice table, exposure time table.","code":""},{"path":"/reference/get_quantity_from_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quantities from variables in sim results — get_quantity_from_variable","text":"","code":"get_quantity_from_variable(var, sim, md, times, comp = NULL)"},{"path":"/reference/get_quantity_from_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quantities from variables in sim results — get_quantity_from_variable","text":"var Name variable sim Output PKPDsim::sim_ode() md Metadata object times Times calculate comp NULL, filter sim$comp","code":""},{"path":"/reference/get_sampling_time_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","title":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","text":"Core function calculate sampling time row sampling schema data.frame.","code":""},{"path":"/reference/get_sampling_time_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","text":"","code":"get_sampling_time_core(row, regimen)"},{"path":"/reference/get_sampling_time_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","text":"row single row sampling_time_design data.frame regimen PKPDsim regimen","code":""},{"path":"/reference/get_sampling_times_from_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"Calculate sampling times based given sampling schema regimen.","code":""},{"path":"/reference/get_sampling_times_from_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"","code":"get_sampling_times_from_scheme(scheme, regimen)"},{"path":"/reference/get_sampling_times_from_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"scheme sampling schema created using create_tdm_schema() regimen PKPDsim regimen object","code":""},{"path":"/reference/get_sampling_times_from_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"vector numeric sampling times","code":""},{"path":"/reference/get_single_target_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single target from a potentially time-varying target design — get_single_target_design","title":"Get a single target from a potentially time-varying target design — get_single_target_design","text":"cases, target design just specify single target. scenarios, time-varying target may make sense. case, regimen update instance, different target can specified. function just grabs right target values overall target design. just single target specified, just return target design -.","code":""},{"path":"/reference/get_single_target_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single target from a potentially time-varying target design — get_single_target_design","text":"","code":"get_single_target_design(target_design, idx = nrow(target_design$scheme))"},{"path":"/reference/get_single_target_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single target from a potentially time-varying target design — get_single_target_design","text":"target_design target design, created using create_target_design. idx number regimen update. default take last instance.","code":""},{"path":"/reference/is_on_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a value (or vector of values) is within the specified target range — is_on_target","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"Checks value (vector values) within specified target range","code":""},{"path":"/reference/is_on_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"","code":"is_on_target(v, target)"},{"path":"/reference/is_on_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"v exposure metric, single value vector target target specification created create_target_design(), named list min max specified.","code":""},{"path":"/reference/is_on_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"Returns logical value TRUE FALSE value v.","code":""},{"path":"/reference/is_single_valid_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that an object represents a single finite number — is_single_valid_number","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"Checks object represents single finite number","code":""},{"path":"/reference/is_single_valid_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"","code":"is_single_valid_number(n)"},{"path":"/reference/is_single_valid_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"n object check","code":""},{"path":"/reference/is_single_valid_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"","code":"mipdtrial:::is_single_valid_number(9) #> [1] TRUE mipdtrial:::is_single_valid_number(mtcars) #> [1] FALSE mipdtrial:::is_single_valid_number(c(1, 2)) #> [1] FALSE"},{"path":"/reference/is_valid_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that an object represents a single finite number — is_valid_number","title":"Checks that an object represents a single finite number — is_valid_number","text":"Checks object represents single finite number","code":""},{"path":"/reference/is_valid_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that an object represents a single finite number — is_valid_number","text":"","code":"is_valid_number(x)"},{"path":"/reference/is_valid_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that an object represents a single finite number — is_valid_number","text":"x object check","code":""},{"path":"/reference/is_valid_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that an object represents a single finite number — is_valid_number","text":"","code":"mipdtrial:::is_single_valid_number(9) #> [1] TRUE mipdtrial:::is_single_valid_number(mtcars) #> [1] FALSE mipdtrial:::is_single_valid_number(c(1, 2)) #> [1] FALSE"},{"path":"/reference/is_valid_numeric_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that an object represents a vectir of finite number with no NA or NaN or Inf — is_valid_numeric_vector","title":"Checks that an object represents a vectir of finite number with no NA or NaN or Inf — is_valid_numeric_vector","text":"Checks object represents vectir finite number NA NaN Inf","code":""},{"path":"/reference/is_valid_numeric_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that an object represents a vectir of finite number with no NA or NaN or Inf — is_valid_numeric_vector","text":"","code":"is_valid_numeric_vector(x)"},{"path":"/reference/is_valid_numeric_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that an object represents a vectir of finite number with no NA or NaN or Inf — is_valid_numeric_vector","text":"x object check","code":""},{"path":"/reference/is_valid_numeric_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that an object represents a vectir of finite number with no NA or NaN or Inf — is_valid_numeric_vector","text":"","code":"mipdtrial:::is_valid_numeric_vector(9) #> [1] TRUE mipdtrial:::is_valid_numeric_vector(mtcars) #> [1] FALSE mipdtrial:::is_valid_numeric_vector(c(1, 2)) #> [1] TRUE"},{"path":"/reference/map_adjust_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"Given set levels model definition, performs MAP Bayesian estimation individual PK/PD parameters, finds appropriate dose achieve specified PK/PD target updates individual's regimen accordingly.","code":""},{"path":"/reference/map_adjust_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"","code":"map_adjust_dose(   tdms,   est_model,   parameters,   omega,   ruv,   regimen,   covariates = NULL,   target_design,   dose_update,   grid = NULL,   ... )"},{"path":"/reference/map_adjust_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"tdms observations included MAP estimates est_model model used estimation parameters population parameters estimation model omega omega matrix estimation model ruv residual error distribution estimation model, named list elements prop (proportional) add (additive). regimen PKPDsim regimen object covariates named list PKPDsim covariates target_design object specifying target design, created using function create_target_design() dose_update update dose dose? grid vector specifying doses intervals use test grid, Example: seq(= 50, = 500, = (500 - 50) / 10) ... arguments passed PKPDmap::get_map_estimates /PKPDsim::sim","code":""},{"path":"/reference/map_adjust_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"Returns named list: regimen: updated regimen; additional_info: MAP parameter estimates","code":""},{"path":"/reference/map_adjust_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"Given set levels model definition, performs MAP Bayesian estimation individual PK/PD parameters, finds appropriate dosing interval achieve specified PK/PD target updates individual's regimen accordingly.","code":""},{"path":"/reference/map_adjust_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"","code":"map_adjust_interval(   tdms,   est_model,   parameters,   omega,   ruv,   regimen,   covariates = NULL,   target_design,   dose_update,   grid = NULL,   ... )"},{"path":"/reference/map_adjust_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"tdms observations included MAP estimates est_model model used estimation parameters population parameters estimation model omega omega matrix estimation model ruv residual error distribution estimation model, named list elements prop (proportional) add (additive). regimen PKPDsim regimen object covariates named list PKPDsim covariates target_design object specifying target design, created using function create_target_design() dose_update update dose dose? grid vector specifying doses intervals use test grid, Example: seq(= 50, = 500, = (500 - 50) / 10) ... arguments passed PKPDmap::get_map_estimates /PKPDsim::sim","code":""},{"path":"/reference/map_adjust_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"Returns named list: regimen: updated regimen; additional_info: MAP parameter estimates","code":""},{"path":"/reference/mipd_target_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Accepted PK/PD exposure targets — mipd_target_types","title":"Accepted PK/PD exposure targets — mipd_target_types","text":"Model-based dose-finding currently implemented following target types: peak / cmax: Peak concentration cmax_1hr: Peak concentration 1hr dose trough, cmin: Trough concentration conc: generic concentration cum_auc: Cumulative AUC auc: auc dosing interval auc24: auc normalized 24-hour period auc12: auc normalized 12-hour period","code":""},{"path":"/reference/mipd_target_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accepted PK/PD exposure targets — mipd_target_types","text":"","code":"mipd_target_types()"},{"path":"/reference/mipd_target_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accepted PK/PD exposure targets — mipd_target_types","text":"Returns character vector accepted target types.","code":""},{"path":"/reference/mipdtrial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MIPDtrial package — mipdtrial-package","title":"MIPDtrial package — mipdtrial-package","text":"Simulation model-informed precision dosing trials","code":""},{"path":"/reference/mipdtrial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MIPDtrial package — mipdtrial-package","text":"Jasmine Hughes jasmine@insight-rx.com","code":""},{"path":"/reference/model_based_starting_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based starting dose — model_based_starting_dose","title":"Model-based starting dose — model_based_starting_dose","text":"light wrapper dose_grid_search finding model-based starting doses returning appropriate regimen object.","code":""},{"path":"/reference/model_based_starting_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based starting dose — model_based_starting_dose","text":"","code":"model_based_starting_dose(design, covariates, cov_mapping, ...)"},{"path":"/reference/model_based_starting_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based starting dose — model_based_starting_dose","text":"design trial design, created using create_trial_design() covariates named list PKPDsim covariates. E.g.: list(WT = PKPDsim::new_covariate(70)) cov_mapping named vector indicating correspondence model covariates data frame columns. Vector names reflect covariates defined model, vector values represent associated column provided data set. ... arguments passed dose_grid_search","code":""},{"path":"/reference/model_based_starting_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based starting dose — model_based_starting_dose","text":"Returns PKPDsim regimen populated model-predicted dose","code":""},{"path":"/reference/parse_spec_file_to_trial_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse YAML spec file to trial design — parse_spec_file_to_trial_design","title":"Parse YAML spec file to trial design — parse_spec_file_to_trial_design","text":"Parse YAML spec file trial design","code":""},{"path":"/reference/parse_spec_file_to_trial_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse YAML spec file to trial design — parse_spec_file_to_trial_design","text":"","code":"parse_spec_file_to_trial_design(file)"},{"path":"/reference/parse_spec_file_to_trial_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse YAML spec file to trial design — parse_spec_file_to_trial_design","text":"file full filepath yaml file","code":""},{"path":"/reference/round_to_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"Round multiple number (e.g. round nearest 5, 10, 100)","code":""},{"path":"/reference/round_to_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"","code":"round_to_multiple(x, multiple)"},{"path":"/reference/round_to_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"x value rounded multiple accuracy round . NULL, x returned unrounded.","code":""},{"path":"/reference/round_to_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"","code":"# Uses \"round-to-even\" strategy round_to_multiple(12.5, 5) #> [1] 10 round_to_multiple(17.5, 5) #> [1] 20"},{"path":"/reference/run_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an MIPD trial — run_trial","title":"Run an MIPD trial — run_trial","text":"function wrapper function make easier run basic MIPD trial minimal function calls. fine-tune control logic, may easier compose step precision-dosing workflow . example, see \"Busulfan MIPD\" vignette.","code":""},{"path":"/reference/run_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an MIPD trial — run_trial","text":"","code":"run_trial(   data,   design,   cov_mapping,   n_ids = NULL,   seed = 0,   verbose = FALSE,   progress = TRUE,   threads = 1 )"},{"path":"/reference/run_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an MIPD trial — run_trial","text":"data data set use simulation, data frame. contain covariates columns, corresponding values cov_mapping column ID, patient identifier. design trial design, created using create_trial_design() cov_mapping named vector indicating correspondence model covariates data frame columns. Vector names reflect covariates defined model, vector values represent associated column provided data set. n_ids number subjects use simulated trial. specified, use subjects data. seed argument passed set.seed() set seed random variability generation ensure reproducibility results. Even run parallel, reproducibility ensures since thread receive reproducible seed number. verbose verbose output? progress show progress bar? (default TRUE) threads number threads run simulations . default simulations run 4 cores, less less available (one core always reserved). user can override specifying manually.","code":""},{"path":"/reference/run_trial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an MIPD trial — run_trial","text":"function performs following steps: Dose patient using function specified initial_dose_method. Collect levels specified times (tdm_times). Adjust dosing specified dose (adjust_doses_at) using logic specified dose_optimization_method Return object data collected end MIPD trial.","code":""},{"path":"/reference/sample_and_adjust_by_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"Doses iteratively adjusted specified dose numbers. Estimation performed MAP Bayesian estimation, simulation used identify dose likely reach specified target. See dose_grid_search dose-finding logic. Optionally, disparate models can used simulation estimation, allow intentional model misspecification. Covariates supplied must support models. True patient parameters (pars_true_i) must match model used simulation.","code":""},{"path":"/reference/sample_and_adjust_by_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"","code":"sample_and_adjust_by_dose(   regimen_update_design,   sampling_design,   target_design,   regimen,   covariates = NULL,   pars_true_i,   sim_model,   sim_ruv = NULL,   verbose = FALSE,   accumulate_data = TRUE,   ... )"},{"path":"/reference/sample_and_adjust_by_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"regimen_update_design data.frame scheme details update regimen MIPD trial. Schemes created using create_regimen_update_design(). sampling_design data.frame sampling scheme, created using create_sampling_design(). target_design target design created using create_target_design() regimen PKPDsim regimen object, containing initial dosing regimen. covariates named list PKPDsim covariates. pars_true_i PK parameters individual. See generate_iiv. sim_model model use simulating \"true\" patient response. sim_ruv residual variability sim_model. Named list proportional (prop) additive (add) error. verbose verbose output? accumulate_data TRUE, use available data adjustment timepoint. set FALSE, use data since last adjustment timepoint current one. ... arguments passed simulate_fit dose_optimization_method function.","code":""},{"path":"/reference/sample_and_adjust_by_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"named list containing final_regimen (doses adjustment), tdms (collected levels, true measured, , without residual variability), additional_info, varies dose_optimization_method. See selected function details.","code":""},{"path":"/reference/sample_and_adjust_by_dose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"Trial design MIPD protocol can vary considerably complexity. function intended cover broad range relatively straight forward designs, may serve template complex designs.","code":""},{"path":"/reference/sim_subject.html","id":null,"dir":"Reference","previous_headings":"","what":"Core function to simulate a single subject — sim_subject","title":"Core function to simulate a single subject — sim_subject","text":"Core function simulate single subject","code":""},{"path":"/reference/sim_subject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core function to simulate a single subject — sim_subject","text":"","code":"sim_subject(data, cov_mapping, pars_true_i, design, verbose = FALSE, ...)"},{"path":"/reference/sim_subject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core function to simulate a single subject — sim_subject","text":"data data subject cov_mapping named vector indicating correspondence model covariates data frame columns. Vector names reflect covariates defined model, vector values represent associated column provided data set. pars_true_i PK parameters individual. See generate_iiv. design trial design, created using create_trial_design() verbose verbose output? ... arguments passed simulate_fit dose_optimization_method function.","code":""},{"path":"/reference/simulate_dose_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","title":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","text":"Simulate different doses/intervals dose/interval grid","code":""},{"path":"/reference/simulate_dose_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","text":"","code":"simulate_dose_interval(   value,   grid_type = \"dose\",   dose_update,   regimen,   parameters,   covariates = NULL,   md,   pta,   target_design,   model,   omega,   obs,   ruv,   ... )"},{"path":"/reference/simulate_dose_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","text":"value element dose/interval grid grid_type either dose grid interval grid dose_update update dose dose? regimen PKPDsim regimen object parameters list model parameters covariates covariates object md metadata object (needed use get_quantity_from_variable() generate target value) pta probability target attainment, list arguments type value, also requires omega non-NULL. NULL, just aim specific conc auc. target_design object specifying target design, created using function create_target_design() model model simulating dose (estimation model) omega IIV matrix, estimation model, probability target attainment target types. obs Value obs determined dose_grid_search() (.e. either \"obs\" AUC compartment) ruv list specifying residual error estimation model: list(prop = 0.1, add = 1.5), probability target attainment target types. ... passed PKPDsim function","code":""},{"path":"/reference/simulate_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MAP Bayesian parameters — simulate_fit","title":"Get MAP Bayesian parameters — simulate_fit","text":"light wrapper around PKPDmap::get_map_estimates PKPDmap::create_iov_object. fine-grained control, use PKPDmap functions directly.","code":""},{"path":"/reference/simulate_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MAP Bayesian parameters — simulate_fit","text":"","code":"simulate_fit(est_model, parameters, omega, ruv, tdms, covariates, regimen, ...)"},{"path":"/reference/simulate_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MAP Bayesian parameters — simulate_fit","text":"est_model model used estimation parameters population parameters estimation model omega omega matrix estimation model ruv residual error distribution estimation model, named list elements prop (proportional) add (additive). tdms observations included MAP estimates covariates named list PKPDsim covariates regimen PKPDsim regimen object ... arguments passed PKPDmap::get_map_estimates","code":""},{"path":"/reference/simulate_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get MAP Bayesian parameters — simulate_fit","text":"named list individual PK parameter estimates","code":""},{"path":"/reference/simulate_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get MAP Bayesian parameters — simulate_fit","text":"MAP Bayesian fits sometimes fail simulated values unlikely. prevent long simulation stalling, fit wrapped tryCatch, NULL returned appropriate processing outside function.","code":""},{"path":"/reference/update_regimen.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a regimen with a new dose — update_regimen","title":"Update a regimen with a new dose — update_regimen","text":"Update regimen new dose","code":""},{"path":"/reference/update_regimen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a regimen with a new dose — update_regimen","text":"","code":"update_regimen(   regimen,   new_dose = NULL,   new_interval = NULL,   dose_update_number )"},{"path":"/reference/update_regimen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a regimen with a new dose — update_regimen","text":"regimen PKPDsim regimen object new_dose value new dose new_interval value new interval dose_update_number integer indicating dose onwards updated","code":""},{"path":"/reference/update_regimen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a regimen with a new dose — update_regimen","text":"Returns PKPDsim regimen object new dose applied.","code":""},{"path":"/reference/weight_based_starting_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight-based starting dose (e.g., mg/kg) — weight_based_starting_dose","title":"Weight-based starting dose (e.g., mg/kg) — weight_based_starting_dose","text":"nomogram possible method supplied create_initial_regimen_design(). method used, create_initial_regimen_design() must also supplied mgkg dosing_weight, must match column name supplied data set.","code":""},{"path":"/reference/weight_based_starting_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight-based starting dose (e.g., mg/kg) — weight_based_starting_dose","text":"","code":"weight_based_starting_dose(covariates, design, cov_mapping)"},{"path":"/reference/weight_based_starting_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight-based starting dose (e.g., mg/kg) — weight_based_starting_dose","text":"covariates named list PKPDsim covariates. E.g.: list(WT = PKPDsim::new_covariate(70)) design trial design, created using create_trial_design() cov_mapping named vector indicating correspondence model covariates data frame columns. Vector names reflect covariates defined model, vector values represent associated column provided data set.","code":""}]
