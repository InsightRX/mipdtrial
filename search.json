[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 InsightRX Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/busulfan_mipd.html","id":"define-trial-design","dir":"Articles","previous_headings":"","what":"1. Define trial design","title":"Busulfan MIPD","text":"simple trial, patients dosed per day four days, 4 levels collected per day, 3.5, 4, 6 8 hours post-dose. adjust doses 2, 3, 4 achieve target cumulative AUC 90 t = 192 hours.","code":"tdm_design <- create_sampling_design(   offset = rep(c(3.5, 4, 6, 8), 4),   at = rep(1:4, each = 4),   anchor = \"dose\" ) target_design <- create_target_design(   targettype = \"cum_auc\",    targetvalue = 90 * 1000,       # unit conversion   time = 192 ) update_design <- create_regimen_update_design(   at = c(2, 3, 4),   anchor = \"dose\",   dose_optimization_method = map_adjust_dose )"},{"path":"/articles/busulfan_mipd.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Busulfan MIPD","text":"use NHANES data set covariate distributions. data set five thousand individuals collected US National Center Health Statistics. See package documentation details. also use dplyr package basic data processing. Since every data set un-tidy way (“Tidy datasets alike, every messy dataset messy way.” –– Hadley Wickham), data cleaning handled outside mipdtrial tools. functions expect patient covariates numeric. next step make sure covariates need. Busulfan known time-dependent relationship clearance, McCune model takes covariate indicates time relationship start (T_CL_EFF; useful test doses impact busulfan clearance). set zero patients. Shukla model also takes conditioning regimen covariate, since co-medication Clofarabine Fludarabine associated change clearance (REGI). also set zero patients. models might require fat-free mass calculated covariates. good time sort processing data set! may also need convert units (height m cm, example.) first rows data set: also look first 10 patients data set, interest speed.","code":"dat <- NHANES::NHANES %>%   # take just the first record per patient   group_by(ID) %>%   slice(1) %>%   ungroup() %>%   # convert columns to numeric   mutate(Gender = ifelse(Gender == \"male\", 1, 0)) %>% # as defined in models   select(ID, Gender, Age, Weight, Height) %>%   # include only patients with all information available   filter(!is.na(Gender), !is.na(Weight), !is.na(Height), !is.na(Age)) dat$T_CL_EFF <- 0 dat$REGI <- 0 head(dat) #> # A tibble: 6 × 7 #>      ID Gender   Age Weight Height T_CL_EFF  REGI #>   <int>  <dbl> <int>  <dbl>  <dbl>    <dbl> <dbl> #> 1 51624      1    34   87.4   165.        0     0 #> 2 51625      1     4   17     105.        0     0 #> 3 51630      0    49   86.7   168.        0     0 #> 4 51638      1     9   29.8   133.        0     0 #> 5 51646      1     8   35.2   131.        0     0 #> 6 51647      0    45   75.7   167.        0     0 ids <- dat$ID[1:10]"},{"path":"/articles/busulfan_mipd.html","id":"load-model-definitions","dir":"Articles","previous_headings":"","what":"3. Load model definitions","title":"Busulfan MIPD","text":"need define model parameters variability terms simulation. study, use ones defined models. also need link covariates data set covariates expected model.","code":"# Set up simulation model (\"true\") model_sim <- pkbusulfanmccune::model() parameters_sim <- pkbusulfanmccune::parameters() omega_sim <- pkbusulfanmccune::omega_matrix() ruv_sim <- pkbusulfanmccune::ruv()  # Set up estimation model (model for MIPD) model_est <- pkbusulfanshukla::model() parameters_est <- pkbusulfanshukla::parameters() omega_est <- pkbusulfanshukla::omega_matrix() ruv_est <- pkbusulfanshukla::ruv() # check which covariates are required for your model using  # `attr(model_sim, \"covariates\")`  # check which covariates are in your data set using `colnames(dat)` cov_mapping <- c(   AGE = \"Age\",    WT = \"Weight\",    HT = \"Height\",    SEX = \"Gender\",   T_CL_EFF = \"T_CL_EFF\",   REGI = \"REGI\" )"},{"path":"/articles/busulfan_mipd.html","id":"initialize-output-metrics-of-interest","dir":"Articles","previous_headings":"","what":"4. Initialize output metrics of interest","title":"Busulfan MIPD","text":"want record “true” cumulative AUC estimated cumulative AUC, along patient identifiers (.e., id). pre-populate data frame rather iteratively binding rows, since performant.","code":"results <- data.frame(   id = ids,   iter = 1,   true_auc = NA_real_,   est_auc = NA_real_ )"},{"path":"/articles/busulfan_mipd.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"5. Simulate a trial!","title":"Busulfan MIPD","text":"patient start dose 3.2 mg/kg body weight. use mipdtrial::dose_grid_search optimize doses attain target 90 mg*h/L. inter-individual variability terms, use inter-individual variability described “true” model, since reflect “true” distribution patient pharmacokinetics. Later, estimate individual PK parameters using estimation model measured TDMs “collect”. residual error terms, use residual error “true” model, since supposed reflect “true” unexplained error (assay error, etc.). function creates data frame error add “true” simulated concentration produced measured therapeutic drug monitoring sample. first rows simulation results:","code":"set.seed(1) # important for reproducibility for (i in ids) {   # get patient covariates   covs <- create_cov_object(     dat[dat$ID == i,],     mapping = cov_mapping   )   # create initial dosing regimen (see PKPDsim::new_regimen for more info)   reg <- PKPDsim::new_regimen(     amt = 3.2 * covs$WT$value, # we will update this each \"day\" of the trial.     interval = 24,     n = 4,     t_inf = 3,     type = \"infusion\"   )   # randomly draw individual PK parameters   pars_true_i <- generate_iiv(     sim_model = model_sim,     omega = omega_sim,     parameters = parameters_sim   )      treatment_summary <- sample_and_adjust_by_dose(     sampling_design = tdm_design,     regimen_update_design = update_design,     target_design = target_design,     regimen = reg,     covariates = covs,     pars_true_i = pars_true_i,     sim_model = model_sim,     sim_ruv = ruv_sim,     est_model = model_est,     parameters = parameters_est,     omega = omega_est,     ruv = ruv_est   )   # extract metrics of interest   results$true_auc[results$id == i] <- calc_auc_from_regimen(     regimen = treatment_summary$final_regimen,     parameters = pars_true_i, # true patient parameters     model = model_sim,     target_design = target_design,     covariates = covs   )   final_parameters <- treatment_summary$additional_info[[length(treatment_summary$additional_info)]]   results$est_auc[results$id == i] <- calc_auc_from_regimen(     regimen = treatment_summary$final_regimen,     parameters = final_parameters, # estimated patient PK     model = model_est,     target_design = target_design,     covariates = covs   ) } head(results) #>      id iter  true_auc  est_auc #> 1 51624    1  83063.85 90006.79 #> 2 51625    1 103788.19 89998.38 #> 3 51630    1  83271.64 90045.76 #> 4 51638    1  95389.50 89999.14 #> 5 51646    1  82884.90 89965.09 #> 6 51647    1 104570.85 89964.21"},{"path":"/articles/busulfan_mipd.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"6. Analyze results","title":"Busulfan MIPD","text":"well patients get target? looks like estimated target attainment high (patients AUC close 90 mg*h/L), “true” AUC higher due model misspecification!  Even model misspecification, target attainment (within 20% target AUC) still high: Overall, 90% patients “true” AUC 90 mg*h/L. -depth analysis differences two models impact target attainment, see Hughes et al., J PKPD (2024)","code":"results %>%   pivot_longer(     c(true_auc, est_auc),     names_to = \"auc_type\",     values_to = \"auc\"   ) %>%   ggplot() +     aes(x = auc_type, y = auc/1000) +     geom_boxplot() +     geom_hline(yintercept = 90, color = \"navyblue\", linetype = \"dashed\") +     scale_y_continuous(limit = c(0, NA)) +     theme_minimal() +     labs(       y = \"Cumulative AUC (mg\\u00B7h/L)\",       x = \"AUC type\"     ) target_attainment <- results %>%   mutate(     ontarget = is_on_target(true_auc, target_design)) %>%   summarize(proportion_ontarget = mean(ontarget)) %>%   pull(proportion_ontarget) target_attainment <- paste0(round(100 * target_attainment), \"%\")"},{"path":"/articles/pegasp_mipd.html","id":"define-simulation-parameters","dir":"Articles","previous_headings":"","what":"1. Define simulation parameters","title":"PEG Asparaginase","text":"PEG-asparaginase long half-life. simulation trial patients receive 4 doses separated 14 days levels collected every 14 days just prior next dose. adjust doses 2 3 achieve steady state asparaginase activity level 300 IU/L (0.3 IU/mL) (goal: 0.1 - 0.5 IU/mL)","code":"tdm_design <- create_sampling_design(   time = c(13.9*24,  27.9*24,  41.9*24) )  update_design <- create_regimen_update_design(   at = c(2, 3),   anchor = \"dose\",   dose_optimization_method = map_adjust_dose )  target_design <- create_target_design(   targettype = \"cmin\",    targetvalue = 300,   at = 4,   anchor = \"dose\" )"},{"path":"/articles/pegasp_mipd.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"PEG Asparaginase","text":"Synthetic dataset based CDC growth curves children. first rows data set: data set much larger, example let’s take just first 20 patients.","code":"dat <- NHANES::NHANES %>%   # take just the first record per patient   group_by(ID) %>%   slice(1) %>%   ungroup() %>%   # convert columns to numeric   mutate(Sex = ifelse(Gender == \"male\", 1, 0)) %>% # as defined in models   filter(Age<18) %>%   select(ID, Sex, Age, Weight, Height) %>%   # include only patients with all information available   filter(!is.na(Sex), !is.na(Weight), !is.na(Height), !is.na(Age)) %>%   mutate(BSA = sqrt(Weight * Height / 3600)) dat <- na.omit(dat) head(dat) #> # A tibble: 6 × 6 #>      ID   Sex   Age Weight Height   BSA #>   <int> <dbl> <int>  <dbl>  <dbl> <dbl> #> 1 51625     1     4   17     105. 0.705 #> 2 51638     1     9   29.8   133. 1.05  #> 3 51646     1     8   35.2   131. 1.13  #> 4 51659     0    10   38.6   142. 1.23  #> 5 51671     0     9   53.1   139. 1.43  #> 6 51679     1    16   73.2   172  1.87 head(dat) #> # A tibble: 6 × 6 #>      ID   Sex   Age Weight Height   BSA #>   <int> <dbl> <int>  <dbl>  <dbl> <dbl> #> 1 51625     1     4   17     105. 0.705 #> 2 51638     1     9   29.8   133. 1.05  #> 3 51646     1     8   35.2   131. 1.13  #> 4 51659     0    10   38.6   142. 1.23  #> 5 51671     0     9   53.1   139. 1.43  #> 6 51679     1    16   73.2   172  1.87 ids <- sample(dat$ID,20)"},{"path":"/articles/pegasp_mipd.html","id":"load-model-definitions","dir":"Articles","previous_headings":"","what":"3. Load model definitions","title":"PEG Asparaginase","text":"need define model parameters variability terms simulation. study, use ones defined models. also need link covariates data set covariates expected model.","code":"# Set up simulation model  model <- pkpegasparaginasemodifiedwurthwein::model() parameters <- pkpegasparaginasemodifiedwurthwein::parameters() omega <- pkpegasparaginasemodifiedwurthwein::omega_matrix() ruv <- pkpegasparaginasemodifiedwurthwein::ruv() # check which covariates are required for your model using  # `attr(model, \"covariates\")`  # check which covariates are in your data set using `colnames(dat)` cov_mapping <- c(   AGE = \"Age\",    WT = \"Weight\",    HT = \"Height\",    BSA = \"BSA\",   SEX = \"Sex\" )"},{"path":"/articles/pegasp_mipd.html","id":"initialize-output-metrics-of-interest","dir":"Articles","previous_headings":"","what":"4. Initialize output metrics of interest","title":"PEG Asparaginase","text":"pre-populate data frame rather iteratively binding rows, since performent.","code":"results <- data.frame(   id = rep(ids,each=3),   iter = c(1,2,3),   day = c(14,28,42),   amt = rep(NA_real_,each=3),   conc = rep(NA_real_,each=3) )"},{"path":"/articles/pegasp_mipd.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"5. Simulate a trial!","title":"PEG Asparaginase","text":"Patients start dose 2000 IU/m2 <22 yo 2500 IU/m2 >22 yo, doses capped maximum total dose 3750 IU. use mipdtrial::dose_grid_search optimize doses attain target concentration 0.3 IU/mL. inter-individual variability terms, use inter-individual variability described model, since reflect distribution patient pharmacokinetics. Later, estimate individual PK parameters using estimation model measured TDMs “collect”. residual error terms, use residual error model, since supposed reflect unexplained error (assay error, etc.). function creates data frame error add simulated concentrations produced measured therapeutic drug monitoring sample. first rows simulation results:","code":"set.seed(1) # important for reproducibility  for (i in ids) {   # get patient covariates   covs <- create_cov_object(     dat[dat$ID == i,],     mapping = cov_mapping   )   # use age-based nomogram   dose <- ifelse(covs$AGE$value >= 22, 2500*covs$BSA$value, 2000*covs$BSA$value)   # capt dose to a maximum of 3750   dose <- pmin(dose, 3750)      # create initial dosing regimen (see PKPDsim::new_regimen for more info)   reg <- new_regimen(     amt = dose,      interval = 14*24,     n = 5,     t_inf = 1,     type = \"infusion\"   )      # randomly draw individual PK parameters   pars_true_i <- generate_iiv(     sim_model = model,     omega = omega,     parameters = parameters   )      treatment_summary <- sample_and_adjust_by_dose(     sampling_design = tdm_design,     regimen_update_design = update_design,     target_design = target_design,     regimen = reg,     covariates = covs,     pars_true_i = pars_true_i,     sim_model = model,     sim_ruv = ruv,     est_model = model,     parameters = parameters,     omega = omega,     ruv = ruv   )        # get final asparaginase activity level   sim <- PKPDsim::sim(     model,     parameters = as.list(pars_true_i), # true patient parameters     regimen = treatment_summary$final_regimen,     covariates = covs,     ruv = ruv,     t_obs = tdm_design$offset,     only_obs = TRUE   )   conc  <- sim$y   results$conc[results$id == i] <- conc      #Add amounts   amt <- treatment_summary$final_regimen$dose_amts[-c(1, 5)]   results$amt[results$id == i] <- amt } head(results) #>      id iter day  amt     conc #> 1 66117    1  14 1391 600.0078 #> 2 66117    2  28 1488 378.3576 #> 3 66117    3  42 1488 343.8977 #> 4 68796    1  14  769 413.9464 #> 5 68796    2  28  864 277.9574 #> 6 68796    3  42  864 296.9893"},{"path":"/articles/pegasp_mipd.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"6. Analyze results","title":"PEG Asparaginase","text":"well patients get target?  work needed establish realistic upper toxicity threshold inform therapeutic window PEG-asparaginase, MIPD approach informed AAL levels already germane therapeutic care PEG-asparaginase may translate better target attainment cost savings. details, see [Brooks et al., PAGE Meeting; June 26-28, 2024, Rome, Italy. (https://www.page-meeting.org/default.asp?abstract=10796)].","code":"results %>%   filter(day %in% c(14, 28, 42)) %>%   filter(!is.na(conc)) %>%   mutate(     below_flag = conc < 100,     within_flag = conc >= 100 & conc <= 500,     above_flag = conc > 500   ) %>%   group_by(day) %>%   summarize(     below_per = mean(below_flag),     within_per = mean(within_flag),     above_per = mean(above_flag)   ) %>%   ungroup() %>%   pivot_longer(     c(below_per,within_per,above_per),     names_to = \"per_type\",     values_to = \"per\"   ) %>%   mutate(     per_type = case_when(       per_type == \"below_per\" ~ \"C. < 0.1 IU/mL\",       per_type == \"within_per\" ~ \"B. 0.1 - 0.5 IU/mL\",       per_type == \"above_per\" ~ \"A. > 0.5 IU/mL\"     )   ) %>%   select(day, per, per_type) %>%   ggplot(     aes(       x = day,       y = per*100,       group = per_type,       fill = per_type,       label = ifelse(round(per * 100,1) == 0, \"\" , round(per*100, 1)))   ) +   geom_bar(stat=\"identity\") +   geom_text(size = 3, position = position_stack(vjust = 0.6), color=\"black\") +   theme_minimal() +   ylab(\"Percent (%)\") +   xlab(\"Time (d)\") +   theme(     legend.title = element_blank(),     panel.grid.major.x = element_blank()   ) +   scale_x_continuous(breaks = c(14,28,42), labels = c(14,28,42)) +   scale_fill_manual(values = c(\"#3870FA\", \"#35BCB1\", \"#FF8C00\"))"},{"path":"/articles/sample_timing.html","id":"define-trial-design","dir":"Articles","previous_headings":"","what":"1. Define trial design","title":"Effect of sample timing","text":"simulated trial two arms: Two samples, collected 1 9 hours dose One sample, collected 5 hours dose case, collect samples fourth dosing interval, simplicity, assume patients receiving vancomycin twice daily, infused 2 hours. adjust fifth dose based levels, aiming daily AUC 400-600 mg*h/L day 6.","code":"# end_of_fourth_infusion <- (4-1) * 12 + 2 # first dose at t=0, infusion is 2 hrs # tdm_times1 <- c(1, 9) + end_of_fourth_infusion # tdm_times2 <- 5 + end_of_fourth_infusion tdm_design1 <- create_sampling_design(   offset = c(1, 9),   at = c(4, 4),    anchor = \"dose\" ) tdm_design2 <- create_sampling_design(   offset = 5,   at = 4,   anchor = \"dose\" ) update_design <- create_regimen_update_design(   at = 5,   anchor = \"dose\",   dose_optimization_method = map_adjust_dose ) target_design <- create_target_design(   targettype = \"auc24\",    targetmin = 400,   targetmax = 600,   at = 6,   anchor = \"day\" )"},{"path":"/articles/sample_timing.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Effect of sample timing","text":"example, randomly generate set weights creatinine clearances (CRCLs) synthetic data set. use Thomson (2009) model, accepts additional clearance hemodialysis covariate. Let’s set zero data set. models might require fat-free mass calculated covariates. good time sort processing data set! first rows data set:","code":"set.seed(15) dat <- data.frame(   ID = 1:30,   weight = rnorm(30, 90, 25),               # kg, normally distributed   crcl = exp(rnorm(30, log(6), log(1.6)))   # L/hr, log-normally distributed  ) dat$CL_HEMO <- 0 head(dat) #>   ID    weight      crcl CL_HEMO #> 1  1  96.47057  4.827349       0 #> 2  2 135.77802  6.013269       0 #> 3  3  81.50954 11.863322       0 #> 4  4 112.42995  8.546496       0 #> 5  5 102.20041  9.448520       0 #> 6  6  58.61535  7.477850       0"},{"path":"/articles/sample_timing.html","id":"load-model-definitions","dir":"Articles","previous_headings":"","what":"3. Load model definitions","title":"Effect of sample timing","text":"need define model parameters variability terms simulation. study, use ones defined models. also need link covariates data set covariates expected model.","code":"#> Loading required package: pkvancothomson # Set up simulation model if (!require(pkvancothomson)) {   PKPDsim::install_default_literature_model(\"pk_vanco_thomson\")   library(pkvancothomson) } model <- pkvancothomson::model() pop_parameters <- pkvancothomson::parameters() omega <- pkvancothomson::omega_matrix() ruv <- pkvancothomson::ruv() # check which covariates are required for your model using  # `PKPDsim::get_model_covariates(model)`  # check which covariates are in your data set using `colnames(dat)` cov_mapping <- c(   WT = \"weight\",    CRCL = \"crcl\",   CL_HEMO = \"CL_HEMO\" )"},{"path":"/articles/sample_timing.html","id":"initialize-output-metrics-of-interest","dir":"Articles","previous_headings":"","what":"4. Initialize output metrics of interest","title":"Effect of sample timing","text":"want compare AUC end treatment course according sample collection strategy. pre-populate data frame rather iteratively binding rows, since performant.","code":"results <- data.frame(   id = dat$ID,   peak_trough = NA_real_,   random = NA_real_ )"},{"path":"/articles/sample_timing.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"5. Simulate a trial!","title":"Effect of sample timing","text":"Patients get model-based dose (using population PK parameters), dose adjusted based MAP Bayesian fit made using collected samples. Individual PK parameters randomly generated based interindividual variability described model, residual variability added sample collected using error model described model. first rows simulation results:","code":"set.seed(15) # important for reproducibility  for (i in dat$ID) {   # get patient covariates   covs <- create_cov_object(     dat[dat$ID == i,],     mapping = cov_mapping   )   # find initial starting dose: define basic regimen, then upda   initial_reg <- model_based_starting_dose(     target_design = target_design,     sampling_design = tdm_design1,     n = 12,     interval = 12,     t_inf = 2,     dose_resolution = 250, # round to nearest 250 mg     grid = seq(250, 6000, by = 250),     grid_type = \"dose\",     # define model components     est_model = model,     parameters = pop_parameters,     covariates = covs,     auc_comp = attr(model, \"size\")   )    # randomly draw individual PK parameters   pars_true_i <- generate_iiv(     sim_model = model,     omega = omega,     parameters = pop_parameters   )      # Summary of both MIPD approaches   treatment_summary1 <- sample_and_adjust_by_dose(     regimen_update_design = update_design,      sampling_design = tdm_design1, # arm 1     target_design = target_design,     regimen = initial_reg,     covariates = covs,     pars_true_i = pars_true_i,     sim_model = model,     sim_ruv = ruv,     est_model = model,     parameters = pop_parameters,     omega = omega,     ruv = ruv   )   treatment_summary2 <- sample_and_adjust_by_dose(     regimen_update_design = update_design,      sampling_design = tdm_design2, # arm 1     target_design = target_design,     regimen = initial_reg,     covariates = covs,     pars_true_i = pars_true_i,     sim_model = model,     sim_ruv = ruv,     est_model = model,     parameters = pop_parameters,     omega = omega,     ruv = ruv   )      # get steady-state AUC at end of treatment course   results$peak_trough[results$id == i] <- calc_auc_from_regimen(     regimen = treatment_summary1$final_regimen,     parameters = pars_true_i, # true patient parameters     model = model,     target_design = target_design,     covariates = covs   )   results$random[results$id == i] <- calc_auc_from_regimen(     regimen = treatment_summary2$final_regimen,     parameters = pars_true_i, # true patient parameters     model = model,     target_design = target_design,     covariates = covs   ) } head(results) #>   id peak_trough    random #> 1  1    500.3640  403.2282 #> 2  2    606.9251  577.4495 #> 3  3    592.2950  484.8727 #> 4  4    404.5096  348.7749 #> 5  5    729.9797 1018.3722 #> 6  6    487.7377  476.6390"},{"path":"/articles/sample_timing.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"6. Analyze results","title":"Effect of sample timing","text":"interested AUC target attainment. target attainment compare two arms trial?  Target attainment high varied little two arms, providing evidence support move collecting two samples collecting single sample per dosing interval. simulating sampling strategy patient, can also look patient responded sampling strategy.  strong correlation final AUC two sampling strategies. patients -exposed -exposed strategies, others -target one strategy .","code":"target_attainment <- results %>%   pivot_longer(     c(peak_trough, random),     names_to = \"sampling_design\",     values_to = \"steady_state_auc\"   ) %>%   mutate(ontarget = is_on_target(steady_state_auc, target_design)) %>%   group_by(sampling_design) %>%   summarize(prop_on_target = 100 * mean(ontarget))  target_attainment %>%   ggplot() +     aes(x = sampling_design, y = prop_on_target) +     geom_bar(stat = \"identity\") +     theme_minimal() +     theme(       panel.grid.major.x = element_blank()     ) +     labs(       x = \"Sampling strategy\",       y = \"Percent on target (%)\"     ) results %>%   ggplot() +     aes(x = peak_trough, y = random) +     geom_rect(       aes(xmin = 400, xmax = 600, ymin = -Inf, ymax = Inf),        fill = \"grey70\",       alpha = 0.05     ) +     geom_rect(       aes(ymin = 400, ymax = 600, xmin = -Inf, xmax = Inf),       fill = \"grey70\",       alpha = 0.05     ) +     geom_point() +     theme_minimal()"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"define-the-trial-design","dir":"Articles","previous_headings":"","what":"1. Define the trial design","title":"Dose and interval adaptation (vancomycin)","text":"simulated trial two samples, peak trough collected dose 1 3. assume can update dose amount dosing interval dose 3 5 aim AUC24 400-600 mg*h/L day 6. create different regimen update designs dose-optimization interval- optimization.","code":"tdm_design <- create_sampling_design(   offset = c(1, -1, 1, -1), # sample 1-hour before true trough, and at peak+1hr   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   at = c(1, 1, 3, 3),   anchor = \"dose\" ) target_design <- create_target_design(   targettype = \"auc24\",    targetmin = 400,   targetmax = 600,   at = 6,   anchor = \"day\" ) dose_update_design <- create_regimen_update_design(   at = c(3, 5),   anchor = \"dose\",   update_type = \"dose\",   dose_optimization_method = map_adjust_dose ) interval_update_design <- create_regimen_update_design(   at = c(3, 5),   anchor = \"dose\",   update_type = \"interval\",   dose_optimization_method = map_adjust_interval )"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"create-a-set-of-digital-patient-covariates","dir":"Articles","previous_headings":"","what":"2. Create a set of digital patient covariates","title":"Dose and interval adaptation (vancomycin)","text":"example, randomly generate set weights creatinine clearances (CRCLs) synthetic data set. See sampling_timing() vignette longer description.","code":"set.seed(15) dat <- data.frame(   ID = 1:30,   weight = rnorm(30, 90, 25),               # kg, normally distributed   crcl = exp(rnorm(30, log(6), log(1.6)))   # L/hr, log-normally distributed  ) dat$CL_HEMO <- 0"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"load-model-definitions","dir":"Articles","previous_headings":"","what":"3. Load model definitions","title":"Dose and interval adaptation (vancomycin)","text":"need define model parameters variability terms simulation. study, use ones defined models. also need link covariates data set covariates expected model.","code":"#> Loading required package: pkvancothomson # check which covariates are required for your model using  # `PKPDsim::get_model_covariates(model)`  # check which covariates are in your data set using `colnames(dat)` cov_mapping <- c(   WT = \"weight\",    CRCL = \"crcl\",   CL_HEMO = \"CL_HEMO\" )"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"simulate-a-trial","dir":"Articles","previous_headings":"","what":"4. Simulate a trial!","title":"Dose and interval adaptation (vancomycin)","text":"Patients get model-based dose (using population PK parameters), adjust either dose interval based MAP Bayesian fit made using collected samples. Individual PK parameters randomly generated based interindividual variability described model, residual variability added sample collected using error model described model. First let’s simulate “dose optimization” scenario, leaving interval fixed.","code":"set.seed(15) # important for reproducibility tdms <- c() dose_updates <- c() for (i in dat$ID) {      #################################################################################   ## Create individual   #################################################################################   # get patient covariates   covs <- create_cov_object(     dat[dat$ID == i,],     mapping = cov_mapping   )   # randomly draw individual PK parameters   pars_true_i <- generate_iiv(     sim_model = model,     omega = omega,     parameters = pop_parameters   )    #################################################################################   ## Find initial starting dose   #################################################################################   # find initial starting dose: define basic regimen, then upda   initial_reg <- model_based_starting_dose(     sampling_design = tdm_design,     target_design = target_design,     n = 12,     interval = 12,     t_inf = 2,     dose_resolution = 250, # round to nearest 250 mg     grid = seq(250, 6000, by = 250),     grid_type = \"dose\",     est_model = model,     parameters = pop_parameters,     covariates = covs,     auc_comp = attr(model, \"size\")   )    #################################################################################   ## Main patient-level loop: run through regimen optimization   #################################################################################   treatment_summary <- sample_and_adjust_by_dose(     regimen_update_design = dose_update_design,      sampling_design = tdm_design,     target_design = target_design,     regimen = initial_reg,     covariates = covs,     pars_true_i = pars_true_i,     sim_model = model,     sim_ruv = ruv,     est_model = model,     parameters = pop_parameters,     omega = omega,     ruv = ruv   )      #################################################################################   ## Collect data into object   #################################################################################   tdms <- bind_rows(     tdms,     treatment_summary$tdms %>% mutate(id = i)   )   dose_updates <- bind_rows(     dose_updates,     treatment_summary$dose_updates %>% mutate(id = i)   )    }"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"analyze-results-for-dose-adaptation","dir":"Articles","previous_headings":"","what":"5. Analyze results for dose-adaptation","title":"Dose and interval adaptation (vancomycin)","text":"Let’s see well worked. figure plot steady state AUC attained using regimen updated time shown x-axis. expect time steady state AUC approach middle range closely, TDM available optimize dose. Since ’re keeping interval fixed, patient dose update times x-axis.","code":"ggplot(dose_updates) +   geom_line(aes(x = t, y = auc_before_update, group = id)) +   geom_point(aes(x = t, y = auc_before_update, group = id)) +   geom_ribbon(data = data.frame(t = c(0, max(dose_updates$t)), ymin = c(400, 400), ymax = c(600, 600)), aes(x = t, ymin = ymin, ymax = ymax), fill = \"blue\", alpha = 0.2) +   xlab(\"Time of regimen update\") + ylab(\"Resulting AUC at t=6 days\")"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"interval-adaptation","dir":"Articles","previous_headings":"","what":"6. Interval adaptation","title":"Dose and interval adaptation (vancomycin)","text":"Next, ’ll simulate trial interval optimized, dose fixed (initial model-based dose obtained). , ’ll allow dose changed doses 3 5 (irrespective interval).","code":"interval_update_design <- create_regimen_update_design(   at = c(3, 5),   anchor = \"dose\",   update_type = \"interval\" ) set.seed(15) # important for reproducibility tdms <- c() dose_updates <- c() for (i in dat$ID) {      #################################################################################   ## Create individual   #################################################################################   # get patient covariates   covs <- create_cov_object(     dat[dat$ID == i,],     mapping = cov_mapping   )   # randomly draw individual PK parameters   pars_true_i <- generate_iiv(     sim_model = model,     omega = omega,     parameters = pop_parameters   )    #################################################################################   ## Find initial starting dose   #################################################################################   # find initial starting dose: define basic regimen, then upda   initial_reg <- model_based_starting_dose(     sampling_design = tdm_design,     target_design = target_design,     n = 30,     interval = 12,     t_inf = 2,     dose_resolution = 250, # round to nearest 250 mg     grid = seq(250, 6000, by = 250),     grid_type = \"dose\",     # define model components     est_model = model,     parameters = pop_parameters,     covariates = covs,     auc_comp = attr(model, \"size\")   )    #################################################################################   ## Main patient-level loop: run through regimen optimization   #################################################################################   treatment_summary <- sample_and_adjust_by_dose(     regimen_update_design = interval_update_design, # <-- use interval update design now!     grid = c(6, 8, 12, 16, 24, 36), # <-- passed on to the optimization function as possible interval options     sampling_design = tdm_design,     target_design = target_design,     regimen = initial_reg,     covariates = covs,     pars_true_i = pars_true_i,     sim_model = model,     sim_ruv = ruv,     est_model = model,     parameters = pop_parameters,     omega = omega,     ruv = ruv,     verbose = F   )      #################################################################################   ## Collect data into object   #################################################################################   # extract metrics of interest   tdms <- bind_rows(     tdms,     treatment_summary$tdms %>% mutate(id = i)   )   dose_updates <- bind_rows(     dose_updates,     treatment_summary$dose_updates %>% mutate(id = i)   ) }"},{"path":"/articles/vancomycin_interval_adaptation.html","id":"analyze-results-for-interval-adaptation","dir":"Articles","previous_headings":"","what":"7. Analyze results for interval-adaptation","title":"Dose and interval adaptation (vancomycin)","text":"plot results simulation, now see dose update times flexible, patient. see resulting steady state AUC24 also approaches middle targeted AUC range. shows dosing interval can also used easily obtain optimal drug exposure.","code":"ggplot(dose_updates) +   geom_line(aes(x = t, y = auc_before_update, group = id)) +   geom_point(aes(x = t, y = auc_before_update, group = id)) +   geom_ribbon(data = data.frame(t = c(0, max(dose_updates$t)), ymin = c(400, 400), ymax = c(600, 600)), aes(x = t, ymin = ymin, ymax = ymax), fill = \"blue\", alpha = 0.2) +   xlab(\"Time of regimen update\") + ylab(\"Resulting AUC at t=6 days\") dose_updates %>%   mutate(idx = rep(c(1:3), 30)) %>%   ggplot() +     geom_bar(aes(x = as.factor(interval_before_update))) +     facet_wrap(~idx) +     xlab(\"Interval\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jasmine Hughes. Author, maintainer. Ron Keizer. Author. InsightRX. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hughes J, Keizer R (2024). mipdtrial: Simulate MIPD trials. R package version 0.0.0.2.","code":"@Manual{,   title = {mipdtrial: Simulate MIPD trials},   author = {Jasmine Hughes and Ron Keizer},   year = {2024},   note = {R package version 0.0.0.2}, }"},{"path":"/index.html","id":"mipdtrial","dir":"","previous_headings":"","what":"Simulate MIPD trials","title":"Simulate MIPD trials","text":"goal mipdtrial make easy simulate pharmacokinetic/ pharmacodynamic (PK/PD) endpoints response dose adaptation. Existing tools cumbersome use purpose. example, tools like NONMEM optimized model development, assume fixed regimens used simulation. algorithms, like sample optimization simulations, optimize information gain attainment clinically relevant metrics, AUC target attainment. mipdtrial fills niche helping users simulate PK/PD resulting dose adaptations informed past PK/PD readouts. example sorts questions: fewer patients receive therapeutic AUC change clinical protocol collecting peak trough sample collecting single mid-interval sample? might model misspecification impact patient target attainment? institution’s nomogram compare model-based dose?","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate MIPD trials","text":"can install development version mipdtrial GitHub : examples use package answer questions MIPD target attainment, check vignettes listed “Articles!”","code":"# install.packages(\"devtools\") devtools::install_github(\"InsightRX/mipdtrial\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulate MIPD trials","text":"use mipdtrial package, crucial understand concept “design” introduced package. main goal designs allow configuration flexible trials sampling regimen updates can depend prior regimen changes, dosing interval changed, still want sample dose 7 regardless dosing interval. , infusion lengths changed, still want sample peak sample. times pre-specified fixed flexibility possible. following designs need configured every trial simulation: sampling_design : determines timepoints samples taken. target_design: determines timepoint target measured, target . regimen_update_design : determines timepoint dose can updated response new information sampled using sampling_design, optimize dosing regimen. three designs can “anchored” specific dose day number. can also offset dosing time e.g. sample “peak” “trough” times. example set design simulated MIPD trial: vignettes show various additional examples set trial simulations using designs. find example MIPD trial design captured yet using functions, please let us know.","code":"## sample at peak (at 1-hour infusion end), and at true trough ## do this at dose #1 and #3 tdm_design <- create_sampling_design(   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   at = c(1, 1, 3, 3),   anchor = \"dose\" )  ## Now sample slightly more realistically, half an hour after infusion end, ## and half an hour before true trough. We can use `offset` for this: tdm_design <- create_sampling_design(   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   offset = c(0.5, -0.5, 0.5, -0.5),    at = c(1, 1, 3, 3),   anchor = \"dose\" )  ## If you know the sampling times and dosing intervals are not going  ## to change during the trial, you could also specify this design simply ## using fixed times as: (assuming 12-hour intervals) tdm_design <- create_sampling_design(     time = c(1.5, 11.5, 25.5, 35.5) )  ## For targets, we follow broadly the same concept. To target an AUC4 of  ## 400-600 at day 6, we can write: target_design <- create_target_design(   targettype = \"auc24\",    targetmin = 400,   targetmax = 600,   at = 6,   anchor = \"day\" )  ## And for regimen update designs, it works similar as well. The following code ## implements dose updates at dose #3 and #5, using a MAP-based optimization. dose_update_design <- create_regimen_update_design(   at = c(3, 5),   anchor = \"dose\",   update_type = \"dose\",   dose_optimization_method = map_adjust_dose )"},{"path":"/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Simulate MIPD trials","text":"mipdtrial package currently development, likely changes core functionality upcoming months. following features short-term roadmap: Implement functionality gather relevant information end simulated trial, include output sample_and_adjust_by_dose. Improve ease use: implement single function run trial Add optimization functions, e.g. combined dose- interval- optimization Add functionality generate realistic trial scenarios, e.g. allow random scattering TDM samples time.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Simulate MIPD trials","text":"welcome input community: think encountered bug, please submit issue GitHub page. Please include reproducible example unexpected behavior. Please open pull request fix updates improve package. ’re sure proposed changes useful within scope package, feel free contact one authors package.","code":""},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Simulate MIPD trials","text":"functionality R package provided “”. authors adhere software development best practices, software may still contain unintended errors. InsightRX Inc. authors package can held liable damages resulting use software. use software package, user waives warranties, expressed implied, including warranties accuracy, quality suitability InsightRX particular purpose, either medical non-medical. ©","code":""},{"path":"/reference/adjust_dose_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","title":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","text":"Checks dose_update_number obtained dose_update scheme","code":""},{"path":"/reference/adjust_dose_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","text":"","code":"adjust_dose_checks(adjust_at_dose, regimen)"},{"path":"/reference/adjust_dose_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for dose_update_number obtained from dose_update scheme — adjust_dose_checks","text":"adjust_at_dose number dose adjust regimen PKPDsim regimen","code":""},{"path":"/reference/calc_auc_from_regimen.html","id":null,"dir":"Reference","previous_headings":"","what":"Get AUC from a regimen — calc_auc_from_regimen","title":"Get AUC from a regimen — calc_auc_from_regimen","text":"Supply final regimen final parameter estimates get final estimated AUC. Supply final regimen true individual parameter estimates get final true AUC.","code":""},{"path":"/reference/calc_auc_from_regimen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get AUC from a regimen — calc_auc_from_regimen","text":"","code":"calc_auc_from_regimen(regimen, parameters, model, target_design, ...)"},{"path":"/reference/calc_auc_from_regimen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get AUC from a regimen — calc_auc_from_regimen","text":"regimen PKPDsim regimen object parameters use MAP estimation get estimated AUC, use true patient parameters get true AUC. Parameters must correspond model used. Accepts parameters supplied data frame row, named vector list. model model use AUC calculations. target_design target design, created using create_target_design() ... arguments passed PKPDsim::sim. Typical arguments include covariates iov_bins","code":""},{"path":"/reference/calc_auc_from_regimen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get AUC from a regimen — calc_auc_from_regimen","text":"numeric vector AUCs simulated time point. Control time period AUC calculated using target_time.","code":""},{"path":"/reference/calc_auc_from_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Get AUC from a simulation — calc_auc_from_sim","title":"Get AUC from a simulation — calc_auc_from_sim","text":"Get AUC simulation","code":""},{"path":"/reference/calc_auc_from_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get AUC from a simulation — calc_auc_from_sim","text":"","code":"calc_auc_from_sim(sim_output, auc_comp)"},{"path":"/reference/calc_auc_from_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get AUC from a simulation — calc_auc_from_sim","text":"sim_output output PKPDsim::sim call auc_comp auc compartment","code":""},{"path":"/reference/calc_auc_from_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get AUC from a simulation — calc_auc_from_sim","text":"numeric vector AUCs simulated time point. Control time period AUC calculated using target_time argument PKPDsim::sim.","code":""},{"path":"/reference/check_when.html","id":null,"dir":"Reference","previous_headings":"","what":"Check / clean when element — check_when","title":"Check / clean when element — check_when","text":"Check / clean element","code":""},{"path":"/reference/check_when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check / clean when element — check_when","text":"","code":"check_when(when, offset, at)"},{"path":"/reference/check_when.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check / clean when element — check_when","text":"character vector length time (single value) determining interpret provided sampling time. NULL use dose time offset (default). options cmax peak, use end infusion base time, cmin trough, use time next dose offset. offset offset standardized PK moments specified . numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day.","code":""},{"path":"/reference/collect_tdms.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate TDM collection — collect_tdms","title":"Simulate TDM collection — collect_tdms","text":"Using \"ground truth\" model, simulate collection drug/biomarker levels. Returns data frame sample time, true value, measured value (residual error added).","code":""},{"path":"/reference/collect_tdms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate TDM collection — collect_tdms","text":"","code":"collect_tdms(sim_model, t_obs, res_var, pars_i, lloq = NULL, ...)"},{"path":"/reference/collect_tdms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate TDM collection — collect_tdms","text":"sim_model model used simulated patient response (\"truth\"). t_obs sample collection times (since start treatment) res_var data frame residual variability quantities add. See pregenerate_ruv details. Expects columns prop add. Error added linear domain, log-transformed models supply error proportional error 0 additive error. pars_i true parameters individual (named list) lloq lower limit quantification. non-NULL, TDMs LLOQ set half LLOQ. ... arguments passed PKPDsim::sim","code":""},{"path":"/reference/collect_tdms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate TDM collection — collect_tdms","text":"data frame columns t (time), true_y (actual level) y (measured level), rows corresponding t_obs.","code":""},{"path":"/reference/create_cov_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of PKPDsim covariates for modeling — create_cov_object","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"Data sets (like NHANES) typically come rectangular formats MIPD trials model individual separately. PKPDsim expects covariates provided list PKPDsim covariates. function helps convert rectangular (wide) data model-ready covariates.","code":""},{"path":"/reference/create_cov_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"","code":"create_cov_object(dat_i, mapping, implementation = NULL, time_column = NULL)"},{"path":"/reference/create_cov_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"dat_i rectangular data set, containing rows individual mapping named vector indicating columns extract, covariate names expected model. Names model covariates values data frame column names. implementation named vector indicating covariate implementation, one c(\"interpolate\", \"locf\"). NULL, assumes \"interpolate\" covariates. See PKPDsim::new_covariate details. Names model covariates values implementation method. time_column covariates time-varying, supply column time. Otherwise, initial value taken covariates.","code":""},{"path":"/reference/create_cov_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"Returns named list PKPDsim covariates.","code":""},{"path":"/reference/create_cov_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"data assumed already numeric (e.g., categorical covariates like smoking status already mapped 1 0). function returns NULL required columns missing NA.","code":""},{"path":"/reference/create_cov_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of PKPDsim covariates for modeling — create_cov_object","text":"","code":"dat <- data.frame(ID = 1, weight = 70, CRCL = 4) mapping <- c(WT = \"weight\", CRCL = \"CRCL\") create_cov_object(dat, mapping) #> $WT #>   value times      unit implementation #> 1    70     0 undefined    interpolate #>  #> $CRCL #>   value times      unit implementation #> 1     4     0 undefined    interpolate #>"},{"path":"/reference/create_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","title":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","text":"function used three functions create_sampling_design(), create_regimen_update_design() create_target_design(), intended direct usage.","code":""},{"path":"/reference/create_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","text":"","code":"create_design(   time = NULL,   when = NULL,   offset = NULL,   at = NULL,   anchor = c(\"dose\", \"day\") )"},{"path":"/reference/create_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create timing designs (static or adaptive) for use in simulated trial, such as sampling designs, target designs etc. — create_design","text":"time vector numeric values. values specified, used fixed sampling times simulated trial. values supplied, sampling times  calculated adaptively trial. determine dose day used reference, time relative specified anchor. character vector length time (single value) determining interpret provided sampling time. NULL use dose time offset (default). options cmax peak, use end infusion base time, cmin trough, use time next dose offset. offset offset standardized PK moments specified . numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed.","code":""},{"path":"/reference/create_regimen_update_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"Create scheme updating dose interval dose optimization trial","code":""},{"path":"/reference/create_regimen_update_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"","code":"create_regimen_update_design(   at,   anchor,   update_type = c(\"dose\", \"interval\"),   dose_optimization_method = map_adjust_dose )"},{"path":"/reference/create_regimen_update_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed. update_type update either future dose (default) interval. dose_optimization_method function determines doses adjusted given collected drug levels. function must return named list structure list(regimen = reg, additional_info = x), reg updated PKPDsim regimen patient x can another information useful post-processing trial results.","code":""},{"path":"/reference/create_regimen_update_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create scheme for updating dose or interval during dose optimization trial — create_regimen_update_design","text":"","code":"create_regimen_update_design(   at = c(2, 5, 8),   anchor = \"dose\" ) #> $dose_optimization_method #> function (tdms, est_model, parameters, omega, ruv, regimen, covariates = NULL,  #>     target_design, dose_update, grid = NULL, ...)  #> { #>     est_par <- simulate_fit(est_model = est_model, parameters = parameters,  #>         omega = omega, ruv = ruv, tdms = tdms, covariates = covariates,  #>         regimen = regimen, ...) #>     if (is.null(grid)) { #>         d1 <- regimen$dose_amts[1] #>         grid <- seq(d1/5, d1 * 5, length.out = 10) #>     } #>     new_dose <- dose_grid_search(est_model = est_model, regimen = regimen,  #>         parameters = est_par, target_design = target_design,  #>         auc_comp = PKPDsim::get_model_auc_compartment(est_model),  #>         dose_update = dose_update, grid = grid, grid_type = \"dose\",  #>         covariates = covariates, iov_bins = PKPDsim::get_model_iov(est_model)$bins,  #>         ...) #>     regimen <- update_regimen(regimen, new_dose = new_dose, dose_update_number = dose_update) #>     list(regimen = regimen, dose_update = dose_update, new_dose = new_dose,  #>         new_interval = NA, additional_info = est_par) #> } #> <bytecode: 0x5594b804fe98> #> <environment: namespace:mipdtrial> #>  #> $scheme #>   base offset at anchor update_type #> 1 dose      0  2   dose        dose #> 2 dose      0  5   dose        dose #> 3 dose      0  8   dose        dose #>  create_regimen_update_design(   at = c(4, 8),   anchor = \"day\",   update_type = \"interval\",   dose_optimization_method = map_adjust_interval ) #> $dose_optimization_method #> function (tdms, est_model, parameters, omega, ruv, regimen, covariates = NULL,  #>     target_design, dose_update, grid = NULL, ...)  #> { #>     est_par <- simulate_fit(est_model = est_model, parameters = parameters,  #>         omega = omega, ruv = ruv, tdms = tdms, covariates = covariates,  #>         regimen = regimen, ...) #>     if (is.null(grid)) { #>         stop(\"Interval-optimization requires `grid` argument.\") #>     } #>     new_interval <- dose_grid_search(est_model = est_model, regimen = regimen,  #>         parameters = est_par, target_design = target_design,  #>         auc_comp = PKPDsim::get_model_auc_compartment(est_model),  #>         dose_update = dose_update, grid = grid, grid_type = \"interval\",  #>         covariates = covariates, iov_bins = PKPDsim::get_model_iov(est_model)$bins,  #>         verbose = T, ...) #>     regimen <- update_regimen(regimen, new_interval = new_interval,  #>         dose_update_number = dose_update) #>     list(regimen = regimen, dose_update = dose_update, new_dose = NA,  #>         new_interval = new_interval, additional_info = est_par) #> } #> <bytecode: 0x5594b813b4b8> #> <environment: namespace:mipdtrial> #>  #> $scheme #>   base offset at anchor update_type #> 1 dose      0  4    day    interval #> 2 dose      0  8    day    interval #>"},{"path":"/reference/create_sampling_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for creating sampling designs. — create_sampling_design","title":"Function for creating sampling designs. — create_sampling_design","text":"Sampling times can usually pre-specified dosing schedule fixed. case scheme can specified static timepoints e.g. time = c(1, 7.5, 25, 31.5) taking peak-trough samples dose 1 4 8-hour regimen. However, dosing interval adaptive, peak trough sampling times stay static adapted --fly simulations. case, possible use specify sampling peak, trough dose concentrations. case, time allowed. exact peak trough concentrations sample, use offset parameter sample e.g. hour post-peak, shortly true troughs.","code":""},{"path":"/reference/create_sampling_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for creating sampling designs. — create_sampling_design","text":"","code":"create_sampling_design(   time = NULL,   when = NULL,   offset = NULL,   at = NULL,   anchor = c(\"dose\", \"day\") )"},{"path":"/reference/create_sampling_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for creating sampling designs. — create_sampling_design","text":"time vector numeric values. values specified, used fixed sampling times simulated trial. values supplied, sampling times  calculated adaptively trial. determine dose day used reference, time relative specified anchor. character vector length time (single value) determining interpret provided sampling time. NULL use dose time offset (default). options cmax peak, use end infusion base time, cmin trough, use time next dose offset. offset offset standardized PK moments specified . numeric vector dose day number \"anchor\" sampling times . Vector needs length time. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed.","code":""},{"path":"/reference/create_sampling_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for creating sampling designs. — create_sampling_design","text":"","code":"# to sample at 1.5/8.5/23.5 hours create_sampling_design(time = c(1.5, 11.5, 23.5)) #>   base offset at anchor #> 1 dose    1.5  1   dose #> 2 dose   11.5  1   dose #> 3 dose   23.5  1   dose  # to sample at the peak (end of infusion) and trough (start of # next dose) of each dose create_sampling_design(   when = c(\"peak\", \"trough\") ) #>     base offset at anchor #> 1   peak      0  1   dose #> 2 trough      0  1   dose  # to sample 30 min post-peak and 30-min pre-trough for the first dose create_sampling_design(   when = c(\"peak\", \"trough\"),   offset = c(0.5, -0.5),   at = c(1, 1) ) #>     base offset at anchor #> 1   peak    0.5  1   dose #> 2 trough   -0.5  1   dose  # The same as above, but now for the first and third dose create_sampling_design(   when = c(\"peak\", \"trough\", \"peak\", \"trough\"),   offset = c(0.5, -0.5, 0.5, -0.5),   at = c(1, 1, 3, 3),   anchor = \"dose\" ) #>     base offset at anchor #> 1   peak    0.5  1   dose #> 2 trough   -0.5  1   dose #> 3   peak    0.5  3   dose #> 4 trough   -0.5  3   dose"},{"path":"/reference/create_target_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create target object — create_target_design","title":"Create target object — create_target_design","text":"function helps user define PKPD target simulation. minimum value maximum value supplied, algorithm targets mid- point. Alternatively, single midpoint can supplied.","code":""},{"path":"/reference/create_target_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create target object — create_target_design","text":"","code":"create_target_design(   targettype = mipd_target_types(),   targetmin = NULL,   targetmax = NULL,   targetvalue = NULL,   single_point_variation = 0.2,   time = NULL,   when = NULL,   offset = NULL,   at = NULL,   anchor = c(\"dose\", \"day\") )"},{"path":"/reference/create_target_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create target object — create_target_design","text":"targettype target type, one accepted types (see mipd_target_types()) targetmin minimum value acceptable, must specified targetmax targetmax maximum value acceptable, must specified targetmin targetvalue single value target, overrides min max values. single_point_variation acceptable variation targetvalue. default 20%. Considered assessment target attainment posteriori, used dose-finding logic. time vector numeric values measure optimize target. cases time required argument, inferred targettype. values supplied, target times calculated adaptively trial. determine dose used reference anchor. time relative specified . values specified, time values used fixed absolute target times simulated trial. character vector length time (single value) determining interpret provided target time. NULL use dose time offset (default). options cmax peak, use end infusion base time, cmin trough, use time next dose offset. offset offset moment (dose, peak, trough). numeric vector dose day number \"anchor\" target times . Vector needs length t. anchor set day, first dose day used. later doses day preferred, anchor can also specified fractionally, e.g. 1.5 use time first dose second half 1st day. anchor either day dose. Single value required, .e. anchor types mixed.","code":""},{"path":"/reference/create_target_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create target object — create_target_design","text":"","code":"## Target cumulative AUC, always exactly at 72 hours: create_target_design(   targettype = \"cum_auc\",   targetvalue = 90,   time = 72 ) #> $type #> [1] \"cum_auc\" #>  #> $value #> [1] 90 #>  #> $min #> [1] 72 #>  #> $max #> [1] 108 #>  #> $scheme #>   base offset at anchor #> 1 dose     72  1   dose #>   ## Target trough concentration at trough after dose 4. create_target_design(   targettype = \"cmin\",   targetvalue = 15,   at = 4,   anchor = \"dose\" ) #> $type #> [1] \"cmin\" #>  #> $value #> [1] 15 #>  #> $min #> [1] 12 #>  #> $max #> [1] 18 #>  #> $scheme #>   base offset at anchor #> 1 cmin      0  4   dose #>   ## Target AUC24 over day 4 create_target_design(   targettype = \"auc24\",   targetvalue = 500,   at = 4,   anchor = \"day\" ) #> $type #> [1] \"auc24\" #>  #> $value #> [1] 500 #>  #> $min #> [1] 400 #>  #> $max #> [1] 600 #>  #> $scheme #>   base offset at anchor #> 1 dose     24  4    day #>"},{"path":"/reference/dose_grid_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"Set refine = TRUE model nonlinear grid search happens iteratively.","code":""},{"path":"/reference/dose_grid_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"","code":"dose_grid_search(   est_model = NULL,   regimen,   target_design = create_target_design(targettype = \"conc\", targetvalue = 10, time = 24),   auc_comp = NULL,   pta = NULL,   omega = NULL,   ruv = NULL,   dose_update = 1,   grid = seq(1, 6000, by = 10),   grid_type = \"dose\",   dose_resolution = 1,   refine = NULL,   refine_range = c(0.7, 1.4),   check_boundaries = TRUE,   max_dose = NULL,   min_dose = NULL,   n_cores = 1,   md = list(),   covariates = NULL,   ... )"},{"path":"/reference/dose_grid_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"est_model model used estimation (\"clinician facing\") regimen PKPDsim regimen object target_design object specifying target design, created using function create_target_design() auc_comp auc compartment (starting 1, R-style C-style!) pta probability target attainment, list arguments type value, also requires omega non-NULL. NULL, just aim specific conc auc. omega IIV matrix, estimation model, probability target attainment target types. ruv list specifying residual error estimation model: list(prop = 0.1, add = 1.5), probability target attainment target types. dose_update update dose dose? grid vector specifying doses intervals use test grid, Example: seq(= 50, = 500, = (500 - 50) / 10) grid_type either \"dose\" \"interval\" dose_resolution precision output rounded (e.g. 50), useful practice specific set dose units. Can course also controlled altering grid. refine found optimal dose refined ? specified, refine model linearity (attr(model, \"misc\")) described \"linear\" refine_range initial optimization, second refinement step implemented? refine_range specified e.g. c(0.9, 1.1) implement second optimization using grid spanning 90% 110% initial optimal dose. Useful non-linear models. check_boundaries optimal dose lower/upper boundary grid, grid expanded? max_dose maximum dose cap min_dose minimum dose cap n_cores Number cores simulate doses md metadata object (needed use get_quantity_from_variable() generate target value) covariates covariates object ... passed PKPDsim function","code":""},{"path":"/reference/dose_grid_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a grid search for a particular target by simulating a grid of doses — dose_grid_search","text":"numeric value indicating recommended dose","code":""},{"path":"/reference/filter_rows_0_100.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rows with values 0 or 100 — filter_rows_0_100","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"Remove rows 0 1 least 2 non-(0,1) rows, otherwise keep highest 0 row lowest 1 row.","code":""},{"path":"/reference/filter_rows_0_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"","code":"filter_rows_0_100(tab)"},{"path":"/reference/filter_rows_0_100.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"tab data frame columns dose y","code":""},{"path":"/reference/filter_rows_0_100.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter rows with values 0 or 100 — filter_rows_0_100","text":"Taken proprietary package, written Kara Woo.","code":""},{"path":"/reference/generate_variability.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate variability terms — generate_variability","title":"Generate variability terms — generate_variability","text":"enable comparison multiple treatment conditions reproducible manner, recommended interindividual variability terms residual variability terms generated prior analyses. design also allows resuming simulation part-way , random seed position may known. Generate IIV one individuals one iterations per individual according supplied omega matrix. Generate unexplained variability one individuals one iterations per individual according supplied proportional additive error.","code":""},{"path":"/reference/generate_variability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate variability terms — generate_variability","text":"","code":"generate_iiv(   sim_model,   omega,   parameters,   ids = 1,   n_iter = 1,   seed = NULL,   ... )  generate_ruv(tdm_sample_time, prop, add, ids = 1, n_iter = 1, seed = NULL)"},{"path":"/reference/generate_variability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate variability terms — generate_variability","text":"sim_model model used simulated patient response (\"truth\"). omega omega matrix, covariance terms. See PKPDsim::sim details. parameters simulation model parameters (population estimates), named list. ids vector ids, can numeric character. n_iter number sets individual parameters generate per id seed set random seed ... arguments passed PKPDsim::sim tdm_sample_time time tdm, since start treatment course (vector identifiers use tdm). example, three days daily dosing peak-trough sample collection, c(1, 24, 25, 48, 49, 73). prop proportional error add additive error","code":""},{"path":"/reference/generate_variability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate variability terms — generate_variability","text":"generate_iiv data frame columns id (corresponding ids), iter ( numbers 1 n_iter) columns individual parameter value. generate_ruv returns data frame identifier columns tdm_number, iteration, id, plus columns proportional (prop) additive (add) error.","code":""},{"path":"/reference/generate_variability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate variability terms — generate_variability","text":"family functions generates variability terms allow reproducible analyses. Using multiple iterations per individual ID allows PK variability within one set covariates. default, generate_iivassumes log-normal (exponential) distribution. See PKPDsim::sim documentation omega_type argument provide finer grain control. generate_ruv Assumes normal distribution proportional additional error.","code":""},{"path":"/reference/get_dose_update_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","title":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","text":"Core function calculate dose update number row regimen update data.frame","code":""},{"path":"/reference/get_dose_update_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","text":"","code":"get_dose_update_core(row, regimen)"},{"path":"/reference/get_dose_update_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core function to calculate the dose update number for a row in a regimen update data.frame — get_dose_update_core","text":"row single row regimen_update data.frame regimen PKPDsim regimen","code":""},{"path":"/reference/get_dose_update_numbers_from_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"Get dose number update dose/interval regime update scheme provided regimen.","code":""},{"path":"/reference/get_dose_update_numbers_from_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"","code":"get_dose_update_numbers_from_design(design, regimen)"},{"path":"/reference/get_dose_update_numbers_from_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"design regimen update design created using create_regimen_update_design() regimen PKPDsim regimen object","code":""},{"path":"/reference/get_dose_update_numbers_from_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dose number to update dose/interval at from the regime update scheme and a provided regimen. — get_dose_update_numbers_from_design","text":"vector dose numbers update ","code":""},{"path":"/reference/get_quantity_from_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quantities from variables in sim results — get_quantity_from_variable","title":"Get quantities from variables in sim results — get_quantity_from_variable","text":"Used add quantities rows advice table, exposure time table.","code":""},{"path":"/reference/get_quantity_from_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quantities from variables in sim results — get_quantity_from_variable","text":"","code":"get_quantity_from_variable(var, sim, md, times, comp = NULL)"},{"path":"/reference/get_quantity_from_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quantities from variables in sim results — get_quantity_from_variable","text":"var Name variable sim Output PKPDsim::sim_ode() md Metadata object times Times calculate comp NULL, filter sim$comp","code":""},{"path":"/reference/get_sampling_time_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","title":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","text":"Core function calculate sampling time row sampling schema data.frame.","code":""},{"path":"/reference/get_sampling_time_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","text":"","code":"get_sampling_time_core(row, regimen)"},{"path":"/reference/get_sampling_time_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core function to calculate the sampling time for a row in a sampling schema data.frame. — get_sampling_time_core","text":"row single row sampling_time_design data.frame regimen PKPDsim regimen","code":""},{"path":"/reference/get_sampling_times_from_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"Calculate sampling times based given sampling schema regimen.","code":""},{"path":"/reference/get_sampling_times_from_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"","code":"get_sampling_times_from_scheme(scheme, regimen)"},{"path":"/reference/get_sampling_times_from_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"scheme sampling schema created using create_tdm_schema() regimen PKPDsim regimen object","code":""},{"path":"/reference/get_sampling_times_from_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sampling times based on a given sampling schema and a regimen. — get_sampling_times_from_scheme","text":"vector numeric sampling times","code":""},{"path":"/reference/is_on_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a value (or vector of values) is within the specified target range — is_on_target","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"Checks value (vector values) within specified target range","code":""},{"path":"/reference/is_on_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"","code":"is_on_target(v, target)"},{"path":"/reference/is_on_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"v exposure metric, single value vector target target specification created create_target_design(), named list min max specified.","code":""},{"path":"/reference/is_on_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a value (or vector of values) is within the specified target range — is_on_target","text":"Returns logical value TRUE FALSE value v.","code":""},{"path":"/reference/is_single_valid_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that an object represents a single finite number — is_single_valid_number","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"Checks object represents single finite number","code":""},{"path":"/reference/is_single_valid_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"","code":"is_single_valid_number(n)"},{"path":"/reference/is_single_valid_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"n object check","code":""},{"path":"/reference/is_single_valid_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that an object represents a single finite number — is_single_valid_number","text":"","code":"mipdtrial:::is_single_valid_number(9) #> [1] TRUE mipdtrial:::is_single_valid_number(mtcars) #> [1] FALSE mipdtrial:::is_single_valid_number(c(1, 2)) #> [1] FALSE"},{"path":"/reference/map_adjust_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"Given set levels model definition, performs MAP Bayesian estimation individual PK/PD parameters, finds appropriate dose achieve specified PK/PD target updates individual's regimen accordingly.","code":""},{"path":"/reference/map_adjust_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"","code":"map_adjust_dose(   tdms,   est_model,   parameters,   omega,   ruv,   regimen,   covariates = NULL,   target_design,   dose_update,   grid = NULL,   ... )"},{"path":"/reference/map_adjust_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"tdms observations included MAP estimates est_model model used estimation parameters population parameters estimation model omega omega matrix estimation model ruv residual error distribution estimation model, named list elements prop (proportional) add (additive). regimen PKPDsim regimen object covariates named list PKPDsim covariates target_design object specifying target design, created using function create_target_design() dose_update update dose dose? grid vector specifying doses intervals use test grid, Example: seq(= 50, = 500, = (500 - 50) / 10) ... arguments passed PKPDmap::get_map_estimates /PKPDsim::sim","code":""},{"path":"/reference/map_adjust_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust doses to achieve a target metric using MAP Bayesian estimation. — map_adjust_dose","text":"Returns named list: regimen: updated regimen; additional_info: MAP parameter estimates","code":""},{"path":"/reference/map_adjust_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"Given set levels model definition, performs MAP Bayesian estimation individual PK/PD parameters, finds appropriate dosing interval achieve specified PK/PD target updates individual's regimen accordingly.","code":""},{"path":"/reference/map_adjust_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"","code":"map_adjust_interval(   tdms,   est_model,   parameters,   omega,   ruv,   regimen,   covariates = NULL,   target_design,   dose_update,   grid = NULL,   ... )"},{"path":"/reference/map_adjust_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"tdms observations included MAP estimates est_model model used estimation parameters population parameters estimation model omega omega matrix estimation model ruv residual error distribution estimation model, named list elements prop (proportional) add (additive). regimen PKPDsim regimen object covariates named list PKPDsim covariates target_design object specifying target design, created using function create_target_design() dose_update update dose dose? grid vector specifying doses intervals use test grid, Example: seq(= 50, = 500, = (500 - 50) / 10) ... arguments passed PKPDmap::get_map_estimates /PKPDsim::sim","code":""},{"path":"/reference/map_adjust_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust intervals to achieve a target metric using MAP Bayesian estimation by adapting the dosing interval — map_adjust_interval","text":"Returns named list: regimen: updated regimen; additional_info: MAP parameter estimates","code":""},{"path":"/reference/mipd_target_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Accepted PK/PD exposure targets — mipd_target_types","title":"Accepted PK/PD exposure targets — mipd_target_types","text":"Model-based dose-finding currently implemented following target types: peak / cmax: Peak concentration cmax_1hr: Peak concentration 1hr dose trough, cmin: Trough concentration conc: generic concentration cum_auc: Cumulative AUC auc: auc dosing interval auc24: auc normalized 24-hour period","code":""},{"path":"/reference/mipd_target_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accepted PK/PD exposure targets — mipd_target_types","text":"","code":"mipd_target_types()"},{"path":"/reference/mipd_target_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accepted PK/PD exposure targets — mipd_target_types","text":"Returns character vector accepted target types.","code":""},{"path":"/reference/mipdtrial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MIPDtrial package — mipdtrial-package","title":"MIPDtrial package — mipdtrial-package","text":"Simulation model-informed precision dosing trials","code":""},{"path":"/reference/mipdtrial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MIPDtrial package — mipdtrial-package","text":"Jasmine Hughes jasmine@insight-rx.com","code":""},{"path":"/reference/model_based_starting_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based starting dose — model_based_starting_dose","title":"Model-based starting dose — model_based_starting_dose","text":"light wrapper dose_grid_search finding model-based starting doses returning appropriate regimen object.","code":""},{"path":"/reference/model_based_starting_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based starting dose — model_based_starting_dose","text":"","code":"model_based_starting_dose(n, interval, type = \"infusion\", t_inf = 1, ...)"},{"path":"/reference/model_based_starting_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based starting dose — model_based_starting_dose","text":"n number doses interval dosing interval type dose type, e.g.: \"infusion\", \"oral\". (see PKPDsim::new_regimen()) t_inf infusion time ... arguments passed dose_grid_search","code":""},{"path":"/reference/model_based_starting_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based starting dose — model_based_starting_dose","text":"Returns PKPDsim regimen populated model-predicted dose","code":""},{"path":"/reference/round_to_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"Round multiple number (e.g. round nearest 5, 10, 100)","code":""},{"path":"/reference/round_to_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"","code":"round_to_multiple(x, multiple)"},{"path":"/reference/round_to_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"x value rounded multiple accuracy round . NULL, x returned unrounded.","code":""},{"path":"/reference/round_to_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to a multiple of any number (e.g. round to the nearest 5, 10, 100) — round_to_multiple","text":"","code":"# Uses \"round-to-even\" strategy round_to_multiple(12.5, 5) #> [1] 10 round_to_multiple(17.5, 5) #> [1] 20"},{"path":"/reference/sample_and_adjust_by_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"Doses iteratively adjusted specified dose numbers. Estimation performed MAP Bayesian estimation, simulation used identify dose likely reach specified target. See dose_grid_search dose-finding logic. Optionally, disparate models can used simulation estimation, allow intentional model misspecification. Covariates supplied must support models. True patient parameters (pars_true_i) must match model used simulation.","code":""},{"path":"/reference/sample_and_adjust_by_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"","code":"sample_and_adjust_by_dose(   regimen_update_design,   sampling_design,   target_design,   regimen,   covariates = NULL,   pars_true_i,   sim_model,   sim_ruv = NULL,   verbose = FALSE,   accumulate_data = TRUE,   ... )"},{"path":"/reference/sample_and_adjust_by_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"regimen_update_design data.frame scheme details update regimen MIPD trial. Schemes created using create_regimen_update_design(). sampling_design data.frame sampling scheme, created using create_sampling_design(). target_design target design created using create_target_design() regimen PKPDsim regimen object, containing initial dosing regimen. covariates named list PKPDsim covariates. pars_true_i PK parameters individual. See generate_iiv. sim_model model use simulating \"true\" patient response. sim_ruv residual variability sim_model. Named list proportional (prop) additive (add) error. verbose verbose output? accumulate_data TRUE, use available data adjustment timepoint. set FALSE, use data since last adjustment timepoint current one. ... arguments passed simulate_fit dose_optimization_method function.","code":""},{"path":"/reference/sample_and_adjust_by_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"named list containing final_regimen (doses adjustment), tdms (collected levels, true measured, , without residual variability), additional_info, varies dose_optimization_method. See selected function details.","code":""},{"path":"/reference/sample_and_adjust_by_dose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust dosing using MIPD on TDMs at specified dose numbers — sample_and_adjust_by_dose","text":"Trial design MIPD protocol can vary considerably complexity. function intended cover broad range relatively straight forward designs, may serve template complex designs.","code":""},{"path":"/reference/simulate_dose_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","title":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","text":"Simulate different doses/intervals dose/interval grid","code":""},{"path":"/reference/simulate_dose_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","text":"","code":"simulate_dose_interval(   value,   grid_type = \"dose\",   dose_update,   regimen,   md,   pta,   target_design,   model,   t_obs,   omega,   obs,   ruv,   ... )"},{"path":"/reference/simulate_dose_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate different doses/intervals in a dose/interval grid — simulate_dose_interval","text":"value element dose/interval grid grid_type either dose grid interval grid dose_update update dose dose? regimen PKPDsim regimen object md metadata object (needed use get_quantity_from_variable() generate target value) pta probability target attainment, list arguments type value, also requires omega non-NULL. NULL, just aim specific conc auc. target_design object specifying target design, created using function create_target_design() model model simulating dose (estimation model) t_obs time observation calculated omega IIV matrix, estimation model, probability target attainment target types. obs Value obs determined dose_grid_search() (.e. either \"obs\" AUC compartment) ruv list specifying residual error estimation model: list(prop = 0.1, add = 1.5), probability target attainment target types. ... passed PKPDsim function","code":""},{"path":"/reference/simulate_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MAP Bayesian parameters — simulate_fit","title":"Get MAP Bayesian parameters — simulate_fit","text":"light wrapper around PKPDmap::get_map_estimates PKPDmap::create_iov_object. fine-grained control, use PKPDmap functions directly.","code":""},{"path":"/reference/simulate_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MAP Bayesian parameters — simulate_fit","text":"","code":"simulate_fit(est_model, parameters, omega, ruv, tdms, covariates, regimen, ...)"},{"path":"/reference/simulate_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MAP Bayesian parameters — simulate_fit","text":"est_model model used estimation parameters population parameters estimation model omega omega matrix estimation model ruv residual error distribution estimation model, named list elements prop (proportional) add (additive). tdms observations included MAP estimates covariates named list PKPDsim covariates regimen PKPDsim regimen object ... arguments passed PKPDmap::get_map_estimates","code":""},{"path":"/reference/simulate_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get MAP Bayesian parameters — simulate_fit","text":"named list individual PK parameter estimates","code":""},{"path":"/reference/simulate_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get MAP Bayesian parameters — simulate_fit","text":"MAP Bayesian fits sometimes fail simulated values unlikely. prevent long simulation stalling, fit wrapped tryCatch, NULL returned appropriate processing outside function.","code":""},{"path":"/reference/update_regimen.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a regimen with a new dose — update_regimen","title":"Update a regimen with a new dose — update_regimen","text":"Update regimen new dose","code":""},{"path":"/reference/update_regimen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a regimen with a new dose — update_regimen","text":"","code":"update_regimen(   regimen,   new_dose = NULL,   new_interval = NULL,   dose_update_number )"},{"path":"/reference/update_regimen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a regimen with a new dose — update_regimen","text":"regimen PKPDsim regimen object new_dose value new dose new_interval value new interval dose_update_number integer indicating dose onwards updated","code":""},{"path":"/reference/update_regimen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a regimen with a new dose — update_regimen","text":"Returns PKPDsim regimen object new dose applied.","code":""}]
